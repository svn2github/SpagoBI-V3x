/*
CREATED		12/05/2008
MODIFIED		12/05/2008
PROJECT		
MODEL		
COMPANY		
AUTHOR		
VERSION		
DATABASE		ORACLE 10G 
*/


-- CREATE TYPES SECTION


-- CREATE TABLES SECTION


CREATE TABLE SBI_AUDIT (
	ID INTEGER NOT NULL ,
	USERNAME VARCHAR2 (40) NOT NULL ,
	USERGROUP VARCHAR2 (100),
	DOC_REF INTEGER,
	DOC_ID INTEGER,
	DOC_LABEL VARCHAR2 (20) NOT NULL ,
	DOC_NAME VARCHAR2 (40) NOT NULL ,
	DOC_TYPE VARCHAR2 (20) NOT NULL ,
	DOC_STATE VARCHAR2 (20) NOT NULL ,
	DOC_PARAMETERS VARCHAR2 (4000),
	SUBOBJ_REF INTEGER,
	SUBOBJ_ID INTEGER,
	SUBOBJ_NAME VARCHAR2 (50),
	SUBOBJ_OWNER VARCHAR2 (50),
	SUBOBJ_ISPUBLIC SMALLINT,
	ENGINE_REF INTEGER,
	ENGINE_ID INTEGER,
	ENGINE_LABEL VARCHAR2 (40) NOT NULL ,
	ENGINE_NAME VARCHAR2 (40) NOT NULL ,
	ENGINE_TYPE VARCHAR2 (20) NOT NULL ,
	ENGINE_URL VARCHAR2 (400),
	ENGINE_DRIVER VARCHAR2 (400),
	ENGINE_CLASS VARCHAR2 (400),
	REQUEST_TIME TIMESTAMP(6) NOT NULL ,
	EXECUTION_START DATE,
	EXECUTION_END DATE,
	EXECUTION_TIME INTEGER,
	EXECUTION_STATE VARCHAR2 (20),
	ERROR SMALLINT,
	ERROR_MESSAGE VARCHAR2 (400),
	ERROR_CODE VARCHAR2 (20),
	EXECUTION_MODALITY VARCHAR2 (40),
PRIMARY KEY (ID) 
) 
/

CREATE TABLE SBI_ACTIVITY_MONITORING (
  ID INTEGER NOT NULL,
  ACTION_TIME TIMESTAMP,
  USERNAME 	 	VARCHAR2(40) NOT NULL,
  USERGROUP		VARCHAR2(400),
  LOG_LEVEL 	VARCHAR2(10) ,
  ACTION_CODE 	VARCHAR2(45) NOT NULL,
  INFO 			VARCHAR2(400),
  PRIMARY KEY (ID)
);
/

CREATE TABLE SBI_BINARY_CONTENTS (
	BIN_ID INTEGER NOT NULL ,
	BIN_CONTENT BLOB NOT NULL ,
PRIMARY KEY (BIN_ID) 
) 
/

CREATE TABLE SBI_CHECKS (
	CHECK_ID INTEGER NOT NULL ,
	DESCR VARCHAR2 (160),
	LABEL VARCHAR2 (20) NOT NULL ,
	VALUE_TYPE_CD VARCHAR2 (20) NOT NULL ,
	VALUE_TYPE_ID INTEGER NOT NULL ,
	VALUE_1 VARCHAR2 (400),
	VALUE_2 VARCHAR2 (400),
	NAME VARCHAR2 (40) NOT NULL ,
PRIMARY KEY (CHECK_ID) 
) 
/

Create table SBI_DATA_SET (
	DS_ID Number(38,0) Constraint "SYS_C0011808" NOT NULL ,
	DESCR Varchar2 (160),
	LABEL Varchar2 (50) Constraint "SYS_C0011809" NOT NULL ,
	NAME Varchar2 (50) Constraint "SYS_C0011810" NOT NULL ,
	FILE_NAME Varchar2 (300),
	QUERY Clob,
	ADRESS Varchar2 (250),
	EXECUTOR_CLASS Varchar2 (250),
	PARAMS Varchar2 (1000),
	DS_METADATA Varchar2 (2000),
	DATA_SOURCE_ID Number(38,0),
	OBJECT_TYPE Varchar2 (50),
	OPERATION Varchar2 (250),
	JCLASS_NAME Varchar2 (100),
	SCRIPT Varchar2 (1000),
	TRANSFORMER_ID INTEGER,
    PIVOT_COLUMN   VARCHAR(50),
	PIVOT_ROW      VARCHAR(50),
	PIVOT_VALUE    VARCHAR(50),
	NUM_ROWS	   SMALLINT DEFAULT 0,
	LANGUAGE_SCRIPT    Varchar2 (50),
primary key ("DS_ID") 
)
/

CREATE TABLE SBI_DATA_SOURCE (
	DS_ID INTEGER NOT NULL ,
	DESCR VARCHAR2 (160),
	LABEL VARCHAR2 (50) NOT NULL ,
	JNDI VARCHAR2 (50),
	URL_CONNECTION VARCHAR2 (500),
	USERNAME VARCHAR2 (50),
	PWD VARCHAR2 (50),
	DRIVER VARCHAR2 (160),
	DIALECT_ID INTEGER NOT NULL ,
    MULTI_SCHEMA Number(38,0) Default 0,
	ATTR_SCHEMA VARCHAR2(45) Default NULL ,
PRIMARY KEY (DS_ID) 
) 
/

CREATE TABLE SBI_DIST_LIST (
	DL_ID INTEGER NOT NULL ,
	NAME VARCHAR2 (40) NOT NULL ,
	DESCR VARCHAR2 (160),
PRIMARY KEY (DL_ID) 
) 
/

CREATE TABLE SBI_DIST_LIST_USER (
	DLU_ID INTEGER NOT NULL ,
	LIST_ID INTEGER NOT NULL ,
	USER_ID VARCHAR2 (40) NOT NULL ,
	E_MAIL VARCHAR2 (70) NOT NULL ,
PRIMARY KEY (DLU_ID) 
) 
/

CREATE TABLE SBI_DIST_LIST_OBJECTS (
	REL_ID INTEGER NOT NULL ,
	DOC_ID INTEGER NOT NULL ,
	DL_ID INTEGER NOT NULL ,
	XML VARCHAR2 (4000) NOT NULL ,
PRIMARY KEY (REL_ID) 
) 
/

CREATE TABLE SBI_DOMAINS (
	VALUE_ID INTEGER NOT NULL ,
	VALUE_CD VARCHAR2 (100),
	VALUE_NM VARCHAR2 (40),
	DOMAIN_CD VARCHAR2 (20),
	DOMAIN_NM VARCHAR2 (40),
	VALUE_DS VARCHAR2 (160),
PRIMARY KEY (VALUE_ID) 
) 
/

CREATE TABLE SBI_DOSSIER_BIN_TEMP (
	BIN_ID INTEGER NOT NULL ,
	PART_ID INTEGER NOT NULL ,
	NAME VARCHAR2 (20),
	BIN_CONTENT BLOB NOT NULL ,
	TYPE VARCHAR2 (20) NOT NULL ,
	CREATION_DATE TIMESTAMP(6) NOT NULL ,
PRIMARY KEY (BIN_ID) 
) 
/

CREATE TABLE SBI_DOSSIER_TEMP (
	PART_ID INTEGER NOT NULL ,
	WORKFLOW_PROCESS_ID DOUBLE PRECISION NOT NULL ,
	BIOBJ_ID INTEGER NOT NULL ,
	PAGE_ID INTEGER NOT NULL ,
PRIMARY KEY (PART_ID) 
) 
/

CREATE TABLE SBI_DOSSIER_PRES (
	PRESENTATION_ID INTEGER NOT NULL ,
	WORKFLOW_PROCESS_ID DOUBLE PRECISION NOT NULL ,
	BIOBJ_ID INTEGER NOT NULL ,
	BIN_ID INTEGER NOT NULL ,
	NAME VARCHAR2 (40) NOT NULL ,
	PROG INTEGER,
	CREATION_DATE TIMESTAMP(6) NOT NULL ,
	APPROVED SMALLINT,
PRIMARY KEY (PRESENTATION_ID) 
) 
/

CREATE TABLE SBI_ENGINES (
	ENGINE_ID INTEGER NOT NULL ,
	ENCRYPT SMALLINT,
	NAME VARCHAR2 (40) NOT NULL ,
	DESCR VARCHAR2 (160),
	MAIN_URL VARCHAR2 (400),
	SECN_URL VARCHAR2 (400),
	OBJ_UPL_DIR VARCHAR2 (400),
	OBJ_USE_DIR VARCHAR2 (400),
	DRIVER_NM VARCHAR2 (400),
	LABEL VARCHAR2 (40) NOT NULL ,
	ENGINE_TYPE INTEGER NOT NULL ,
	CLASS_NM VARCHAR2 (400),
	BIOBJ_TYPE INTEGER NOT NULL ,
	DEFAULT_DS_ID INTEGER,
	USE_DATASOURCE SMALLINT DEFAULT 0,
	USE_DATASET SMALLINT DEFAULT 0,
PRIMARY KEY (ENGINE_ID) 
) 
/

CREATE TABLE SBI_EVENTS (
	ID INTEGER NOT NULL ,
	USER_EVENT VARCHAR2 (40) NOT NULL ,
PRIMARY KEY (ID) 
) 
/

CREATE TABLE SBI_EVENTS_LOG (
	ID INTEGER NOT NULL ,
	USER_EVENT VARCHAR2 (40) NOT NULL ,
	EVENT_DATE DATE NOT NULL ,
	DESCR VARCHAR2 (4000) NOT NULL ,
	PARAMS VARCHAR2 (1000),
	HANDLER VARCHAR2 (400) DEFAULT 'IT.ENG.SPAGOBI.EVENTS.HANDLERS.DEFAULTEVENTPRESENTATIONHANDLER' NOT NULL ,
PRIMARY KEY (ID) 
) 
/

CREATE TABLE SBI_EVENTS_ROLES (
	EVENT_ID INTEGER NOT NULL ,
	ROLE_ID INTEGER NOT NULL ,
PRIMARY KEY (EVENT_ID,ROLE_ID) 
) 
/

Create table SBI_EXT_ROLES (
	EXT_ROLE_ID Number(38,0) Constraint "SYS_C0011867" NOT NULL ,
	NAME Varchar2 (100) NOT NULL,
	DESCR Varchar2 (160),
	CODE Varchar2 (20),
	ROLE_TYPE_CD Varchar2 (20) Constraint "SYS_C0011868" NOT NULL ,
	ROLE_TYPE_ID Number(38,0) Constraint "SYS_C0011869" NOT NULL ,
	SEE_SUBOBJECTS Number(38,0) Default 1,
	SEE_VIEWPOINTS Number(38,0) Default 1,
	SEE_SNAPSHOTS Number(38,0) Default 1,
	SEE_NOTES Number(38,0) Default 1,
	SEND_MAIL Number(38,0) Default 1,
	SAVE_INTO_FOLDER Number(38,0) Default 1,
	SAVE_REMEMBER_ME Number(38,0) Default 1,
	SEE_METADATA Number(38,0) Default 1,
	SAVE_METADATA Number(38,0) Default 1,
	SAVE_SUBOBJECTS Number(38,0) Default 1,
	BUILD_QBE_QUERY Number(38,0) Default 1,
	CONSTRAINT XAK1SBI_EXT_ROLES UNIQUE (NAME),
primary key ("EXT_ROLE_ID") 
) 
/

CREATE TABLE SBI_FUNC_ROLE (
	FUNCT_ID INTEGER NOT NULL ,
	STATE_ID INTEGER NOT NULL ,
	ROLE_ID INTEGER NOT NULL ,
	STATE_CD VARCHAR2 (20),
PRIMARY KEY (FUNCT_ID,STATE_ID,ROLE_ID) 
) 
/

CREATE TABLE SBI_FUNCTIONS (
	FUNCT_ID INTEGER NOT NULL ,
	FUNCT_TYPE_CD VARCHAR2 (20) NOT NULL ,
	PARENT_FUNCT_ID INTEGER,
	NAME VARCHAR2 (40),
	DESCR VARCHAR2 (160),
	PATH VARCHAR2 (400),
	CODE VARCHAR2 (40) NOT NULL ,
	PROG INTEGER NOT NULL ,
	FUNCT_TYPE_ID INTEGER NOT NULL ,
PRIMARY KEY (FUNCT_ID) 
) 
/

CREATE TABLE SBI_GEO_FEATURES (
	FEATURE_ID INTEGER NOT NULL ,
	NAME VARCHAR2 (40) NOT NULL ,
	DESCR VARCHAR2 (160),
	TYPE VARCHAR2 (40),
PRIMARY KEY (FEATURE_ID) 
) 
/

CREATE TABLE SBI_GEO_MAP_FEATURES (
	MAP_ID INTEGER NOT NULL ,
	FEATURE_ID INTEGER NOT NULL ,
	SVG_GROUP VARCHAR2 (40),
	VISIBLE_FLAG VARCHAR2 (1),
PRIMARY KEY (MAP_ID,FEATURE_ID) 
) 
/

CREATE TABLE SBI_GEO_MAPS (
	MAP_ID INTEGER NOT NULL ,
	NAME VARCHAR2 (40) NOT NULL ,
	DESCR VARCHAR2 (160),
	URL VARCHAR2 (400) ,
	FORMAT VARCHAR2 (40),
	BIN_ID INTEGER,
PRIMARY KEY (MAP_ID) 
) 
/

CREATE TABLE SBI_LOV (
	LOV_ID INTEGER NOT NULL ,
	DESCR VARCHAR2 (160),
	LABEL VARCHAR2 (20) NOT NULL ,
	INPUT_TYPE_CD VARCHAR2 (20) NOT NULL ,
	DEFAULT_VAL VARCHAR2 (40),
	LOV_PROVIDER CLOB ,
	INPUT_TYPE_ID INTEGER NOT NULL ,
	PROFILE_ATTR VARCHAR2 (20),
	NAME VARCHAR2 (40) NOT NULL ,
PRIMARY KEY (LOV_ID) 
) 
/


CREATE TABLE SBI_MENU (
		MENU_ID INTEGER NOT NULL,
		NAME VARCHAR2(50), 
		DESCR VARCHAR2(2000),
		PARENT_ID INTEGER DEFAULT 0, 
		BIOBJ_ID INTEGER,
		VIEW_ICONS SMALLINT DEFAULT 0,
		HIDE_TOOLBAR SMALLINT DEFAULT 0, 
		HIDE_SLIDERS SMALLINT DEFAULT 0,
		STATIC_PAGE VARCHAR2(45),
		BIOBJ_PARAMETERS CLOB NULL,
		SUBOBJ_NAME VARCHAR2(50) NULL,
		SNAPSHOT_NAME VARCHAR2(100) NULL,
		SNAPSHOT_HISTORY INTEGER NULL,
		FUNCTIONALITY VARCHAR2(50) NULL,
		INITIAL_PATH VARCHAR2(400) NULL,
		EXT_APP_URL VARCHAR2(1000) NULL,
		PROG INTEGER  DEFAULT 1 NOT NULL,
PRIMARY KEY (MENU_ID)
)
/

CREATE TABLE SBI_MENU_ROLE (
       MENU_ID INTEGER NOT NULL, 
       EXT_ROLE_ID INTEGER NOT NULL,
PRIMARY KEY (MENU_ID, EXT_ROLE_ID)
)
/

CREATE TABLE SBI_OBJ_FUNC (
	BIOBJ_ID INTEGER NOT NULL ,
	FUNCT_ID INTEGER NOT NULL ,
	PROG INTEGER,
PRIMARY KEY (BIOBJ_ID,FUNCT_ID) 
) 
/

CREATE TABLE SBI_OBJ_PAR (
	OBJ_PAR_ID INTEGER NOT NULL ,
	PAR_ID INTEGER NOT NULL ,
	BIOBJ_ID INTEGER NOT NULL ,
	LABEL VARCHAR2 (40) NOT NULL ,
	REQ_FL SMALLINT,
	MOD_FL SMALLINT,
	VIEW_FL SMALLINT,
	MULT_FL SMALLINT,
	PROG INTEGER NOT NULL ,
	PARURL_NM VARCHAR2 (20),
	PRIORITY INTEGER,
PRIMARY KEY (OBJ_PAR_ID) 
) 
/

CREATE TABLE SBI_OBJ_PARUSE (
	OBJ_PAR_ID INTEGER NOT NULL ,
	USE_ID INTEGER NOT NULL ,
	OBJ_PAR_FATHER_ID INTEGER NOT NULL ,
	FILTER_OPERATION VARCHAR2 (20) NOT NULL ,
	PROG INTEGER NOT NULL ,
	FILTER_COLUMN VARCHAR2 (30) NOT NULL ,
	PRE_CONDITION VARCHAR2 (10),
	POST_CONDITION VARCHAR2 (10),
	LOGIC_OPERATOR VARCHAR2 (10),
PRIMARY KEY (OBJ_PAR_ID,USE_ID,OBJ_PAR_FATHER_ID,FILTER_OPERATION) 
) 
/

CREATE TABLE SBI_OBJ_STATE (
	BIOBJ_ID INTEGER NOT NULL ,
	STATE_ID INTEGER NOT NULL ,
	START_DT DATE NOT NULL ,
	END_DT DATE,
	NOTE VARCHAR2 (300),
PRIMARY KEY (BIOBJ_ID,STATE_ID,START_DT) 
) 
/

CREATE TABLE SBI_OBJECT_NOTES (
	OBJ_NOTE_ID INTEGER NOT NULL ,
	BIOBJ_ID INTEGER NOT NULL ,
	BIN_ID INTEGER,
	EXEC_REQ VARCHAR2 (500),
	OWNER VARCHAR2 (50),
	ISPUBLIC SMALLINT,
	CREATION_DATE TIMESTAMP(6) NOT NULL ,
	LAST_CHANGE_DATE TIMESTAMP(6) NOT NULL ,
PRIMARY KEY (OBJ_NOTE_ID) 
) 
/

CREATE TABLE SBI_OBJECT_TEMPLATES (
	OBJ_TEMP_ID INTEGER NOT NULL ,
	BIOBJ_ID INTEGER NOT NULL ,
	BIN_ID INTEGER,
	NAME VARCHAR2 (50),
	PROG INTEGER,
	DIMENSION VARCHAR2 (20),
	CREATION_DATE DATE,
	CREATION_USER VARCHAR2 (45) NOT NULL ,
	ACTIVE SMALLINT,
PRIMARY KEY (OBJ_TEMP_ID) 
) 
/

CREATE TABLE SBI_OBJECTS (
	BIOBJ_ID INTEGER NOT NULL ,
	ENGINE_ID INTEGER NOT NULL ,
	DESCR VARCHAR2 (400),
	LABEL VARCHAR2 (20) NOT NULL ,
	ENCRYPT SMALLINT,
	PATH VARCHAR2 (400),
	REL_NAME VARCHAR2 (400),
	STATE_ID INTEGER NOT NULL ,
	STATE_CD VARCHAR2 (20) NOT NULL ,
	BIOBJ_TYPE_CD VARCHAR2 (20) NOT NULL ,
	BIOBJ_TYPE_ID INTEGER NOT NULL ,
	SCHED_FL SMALLINT,
	EXEC_MODE_ID INTEGER,
	STATE_CONS_ID INTEGER,
	EXEC_MODE_CD VARCHAR2 (20),
	STATE_CONS_CD VARCHAR2 (20),
	NAME VARCHAR2 (200) NOT NULL ,
	VISIBLE SMALLINT NOT NULL ,
	UUID VARCHAR2 (40) NOT NULL ,
	DATA_SOURCE_ID INTEGER,
	DATA_SET_ID INTEGER,
	CREATION_DATE TIMESTAMP(6) NOT NULL ,
	CREATION_USER VARCHAR2 (45) NOT NULL ,
	REFRESH_SECONDS INTEGER DEFAULT 0,
	PROF_VISIBILITY VARCHAR2 (400),
PRIMARY KEY (BIOBJ_ID) 
) 
/

CREATE TABLE SBI_OBJECTS_RATING (
	USER_ID VARCHAR2 (127) NOT NULL ,
	OBJ_ID INTEGER NOT NULL ,
	RATING INTEGER NOT NULL ,
PRIMARY KEY (USER_ID,OBJ_ID) 
) 
/

CREATE TABLE SBI_PARAMETERS (
	PAR_ID INTEGER NOT NULL ,
	DESCR VARCHAR2 (160),
	LENGTH SMALLINT NOT NULL ,
	LABEL VARCHAR2 (20) NOT NULL ,
	PAR_TYPE_CD VARCHAR2 (20) NOT NULL ,
	MASK VARCHAR2 (20),
	PAR_TYPE_ID INTEGER NOT NULL ,
	NAME VARCHAR2 (40) NOT NULL ,
	FUNCTIONAL_FLAG SMALLINT DEFAULT 1 NOT NULL ,
	TEMPORAL_FLAG SMALLINT DEFAULT 0 NOT NULL ,
PRIMARY KEY (PAR_ID) 
) 
/

CREATE TABLE SBI_PARUSE (
	USE_ID INTEGER NOT NULL ,
	LOV_ID INTEGER,
	LABEL VARCHAR2 (20) NOT NULL ,
	DESCR VARCHAR2 (160),
	PAR_ID INTEGER NOT NULL ,
	NAME VARCHAR2 (40) NOT NULL ,
	MAN_IN INTEGER NOT NULL ,
	SELECTION_TYPE VARCHAR2 (20) DEFAULT 'LIST',
	MULTIVALUE_FLAG INTEGER DEFAULT 0,
PRIMARY KEY (USE_ID) 
) 
/

CREATE TABLE SBI_PARUSE_CK (
	USE_ID INTEGER NOT NULL ,
	CHECK_ID INTEGER NOT NULL ,
	PROG INTEGER,
PRIMARY KEY (USE_ID,CHECK_ID) 
) 
/

CREATE TABLE SBI_PARUSE_DET (
	USE_ID INTEGER NOT NULL ,
	EXT_ROLE_ID INTEGER NOT NULL ,
	PROG INTEGER,
	HIDDEN_FL SMALLINT,
	DEFAULT_VAL VARCHAR2 (40),
PRIMARY KEY (USE_ID,EXT_ROLE_ID) 
) 
/

CREATE TABLE SBI_REMEMBER_ME (
	ID INTEGER NOT NULL ,
	USERNAME VARCHAR2 (40) NOT NULL ,
	BIOBJ_ID INTEGER NOT NULL ,
	SUBOBJ_ID INTEGER,
	PARAMETERS CLOB,
	NAME VARCHAR2 (50) NOT NULL ,
	DESCRIPTION CLOB,
PRIMARY KEY (ID) 
) 
/

CREATE TABLE SBI_ROLE_TYPE_USER_FUNC (
	ROLE_TYPE_ID INTEGER NOT NULL ,
	USER_FUNCT_ID INTEGER NOT NULL ,
PRIMARY KEY (ROLE_TYPE_ID,USER_FUNCT_ID) 
) 
/

CREATE TABLE SBI_SNAPSHOTS (
	SNAP_ID INTEGER NOT NULL ,
	BIOBJ_ID INTEGER NOT NULL ,
	BIN_ID INTEGER,
	NAME VARCHAR2 (100),
	DESCRIPTION VARCHAR2 (1000),
	CREATION_DATE TIMESTAMP(6) NOT NULL ,
PRIMARY KEY (SNAP_ID) 
) 
/

CREATE TABLE SBI_SUBOBJECTS (
	SUBOBJ_ID INTEGER NOT NULL ,
	BIOBJ_ID INTEGER NOT NULL ,
	BIN_ID INTEGER,
	NAME VARCHAR2 (50) NOT NULL,
	DESCRIPTION VARCHAR2 (100),
	OWNER VARCHAR2 (50),
	ISPUBLIC SMALLINT,
	CREATION_DATE TIMESTAMP(6) NOT NULL ,
	LAST_CHANGE_DATE TIMESTAMP(6) NOT NULL ,
PRIMARY KEY (SUBOBJ_ID) 
) 
/

CREATE TABLE SBI_SUBREPORTS (
	MASTER_RPT_ID INTEGER NOT NULL ,
	SUB_RPT_ID INTEGER NOT NULL ,
PRIMARY KEY (MASTER_RPT_ID,SUB_RPT_ID) 
) 
/

CREATE TABLE SBI_USER_FUNC (
	USER_FUNCT_ID INTEGER NOT NULL ,
	NAME VARCHAR2 (50),
	DESCRIPTION VARCHAR2 (100),
PRIMARY KEY (USER_FUNCT_ID) 
) 
/

CREATE TABLE SBI_VIEWPOINTS (
	VP_ID INTEGER NOT NULL ,
	BIOBJ_ID INTEGER NOT NULL ,
	VP_NAME VARCHAR2 (40) NOT NULL ,
	VP_OWNER VARCHAR2 (40),
	VP_DESC VARCHAR2 (160),
	VP_SCOPE VARCHAR2 (20) NOT NULL ,
	VP_VALUE_PARAMS CLOB,
	VP_CREATION_DATE TIMESTAMP(6) NOT NULL ,
PRIMARY KEY (VP_ID) 
) 
/


CREATE TABLE SBI_KPI_ROLE (
	id_kpi_role INTEGER NOT NULL,
	KPI_ID INTEGER NOT NULL,
	EXT_ROLE_ID INTEGER NOT NULL,
 PRIMARY KEY (id_kpi_role)
 ) 
/

Create table SBI_KPI (
	KPI_ID INTEGER NOT NULL ,
	ID_MEASURE_UNIT Number(38,0),
	DS_ID Number(38,0),
	ID_KPI_PARENT Number(38,0),
	THRESHOLD_ID Number(38,0),
	NAME Varchar2 (400)  NOT NULL ,
	CODE Varchar2 (40),
	METRIC Varchar2 (1000),
	DESCRIPTION Varchar2 (1000),
	WEIGHT Number(38,0),
	IS_ADDITIVE Char (1),
	FLG_IS_FATHER Char (1),
	KPI_TYPE NUMBER(38,0),
	METRIC_SCALE_TYPE Number(38,0),
	MEASURE_TYPE Number(38,0),
	INTERPRETATION Varchar2 (1000),
	INPUT_ATTRIBUTES Varchar2 (1000),
	MODEL_REFERENCE Varchar2 (255),
	TARGET_AUDIENCE Varchar2 (1000),
primary key ("KPI_ID")  
)
/

Create table SBI_KPI_DOCUMENTS (
	ID_KPI_DOC INTEGER NOT NULL,
	BIOBJ_ID INTEGER NOT NULL,
	KPI_ID INTEGER NOT NULL,
 Primary Key ("ID_KPI_DOC")
)
/


Create table SBI_KPI_VALUE (
	ID_KPI_INSTANCE_VALUE Number(38,0)  NOT NULL ,
	ID_KPI_INSTANCE Number(38,0)  NOT NULL ,
	VALUE Varchar2 (40),
	BEGIN_DT Timestamp(6),
	END_DT Timestamp(6),
	RESOURCE_ID Number(38,0),
	DESCRIPTION Varchar2 (100),
	XML_DATA CLOB,
	ORG_UNIT_ID INTEGER,
	HIERARCHY_ID INTEGER,
	COMPANY VARCHAR2(200),
primary key ("ID_KPI_INSTANCE_VALUE") 
) 
/





Create table SBI_MEASURE_UNIT (
	ID_MEASURE_UNIT Number(38,0)  NOT NULL ,
	NAME Varchar2 (20),
	SCALE_TYPE_ID Number(38,0)  NOT NULL ,
	SCALE_CD Varchar2 (40),
	SCALE_NM Varchar2 (400),
primary key ("ID_MEASURE_UNIT") 
) 
/

Create table SBI_THRESHOLD (
	THRESHOLD_ID Number(38,0)  NOT NULL ,
	THRESHOLD_TYPE_ID Number(38,0)  NOT NULL ,
	NAME Varchar2 (127),
	DESCRIPTION Varchar2 (255),
	CODE Varchar2(45) NOT NULL,
primary key ("THRESHOLD_ID") 
) 
/

Create table SBI_THRESHOLD_VALUE (
	ID_THRESHOLD_VALUE Number(38,0)  NOT NULL ,
	THRESHOLD_ID Number(38,0)  NOT NULL ,
	SEVERITY_ID Number(38,0),
	MIN_VALUE Number,
	MAX_VALUE Number,
	LABEL Varchar2 (20) NOT NULL,
	COLOUR Varchar2 (20),
	POSITION Number(38,0),
	min_closed SMALLINT,
	max_closed SMALLINT,
	th_value Number (38,0),
primary key ("ID_THRESHOLD_VALUE") 
) 
/

Create table SBI_KPI_MODEL (
	KPI_MODEL_ID Number(38,0)  NOT NULL ,
	KPI_ID Number(38,0),
	KPI_MODEL_TYPE_ID Number(38,0)  NOT NULL ,
	KPI_PARENT_MODEL_ID Number(38,0),
	KPI_MODEL_CD Varchar2 (40) NOT NULL,
	KPI_MODEL_NM Varchar2 (400),
	KPI_MODEL_DESC Varchar2 (1000),
	KPI_MODEL_LBL VARCHAR2(100) NOT NULL,
primary key ("KPI_MODEL_ID") 
) 
/


Create table SBI_KPI_PERIODICITY (
	ID_KPI_PERIODICITY Number(38,0)  NOT NULL ,
	NAME Varchar2 (400) NOT NULL,
	MONTHS Number(38,0),
	DAYS Number(38,0),
	HOURS Number(38,0),
	MINUTES Number(38,0),
	chron_string Varchar2(20),
	start_date Timestamp(6),
primary key ("ID_KPI_PERIODICITY") 
) 
/


Create table SBI_KPI_INSTANCE (
	ID_KPI_INSTANCE Number(38,0)  NOT NULL ,
	KPI_ID Number(38,0)  NOT NULL ,
	THRESHOLD_ID Number(38,0),
	ID_MEASURE_UNIT Number(38,0),
	WEIGHT Number(38,0),
	BEGIN_DT Timestamp(6),
	CHART_TYPE_ID Number(38,0),
	TARGET Number(38,4),
primary key ("ID_KPI_INSTANCE") 
) 
/

Create table SBI_KPI_INSTANCE_HISTORY (
	ID_KPI_INSTANCE_HISTORY Number(38,0)  NOT NULL ,
	ID_MEASURE_UNIT Number(38,0)   ,
	THRESHOLD_ID Number(38,0)   ,
	ID_KPI_INSTANCE Number(38,0)  NOT NULL ,
	WEIGHT Number(38,0),
	BEGIN_DT Timestamp(6),
	END_DT Timestamp(6),
	CHART_TYPE_ID Number(38,0),
	TARGET Number(38,6),
primary key ("ID_KPI_INSTANCE_HISTORY") 
) 
/

Create table SBI_KPI_INST_PERIOD (
  KPI_INST_PERIOD_ID Number(38,0) NOT NULL,
  KPI_INSTANCE_ID Number(38,0) NOT NULL,
  PERIODICITY_ID Number(38,0) NOT NULL,
  DEFAULT_VALUE SMALLINT DEFAULT NULL,
  PRIMARY KEY (KPI_INST_PERIOD_ID)
)
/

Create table SBI_KPI_MODEL_INST (
	KPI_MODEL_INST Number(38,0)  NOT NULL ,
	KPI_MODEL_INST_PARENT Number(38,0),
	ID_KPI_INSTANCE Number(38,0),
	NAME Varchar2 (400),
	LABEL Varchar2 (100) NOT NULL,
	DESCRIPTION Varchar2 (1000),
	START_DATE Timestamp(6),
	END_DATE Timestamp(6),
	KPI_MODEL_ID Number(38,0),
	modelUUID VARCHAR2(255),
primary key ("KPI_MODEL_INST") 
)
/

Create table SBI_RESOURCES (
	RESOURCE_ID Number(38,0)  NOT NULL ,
	RESOURCE_TYPE_ID Number(38,0)  NOT NULL ,
	TABLE_NAME Varchar2 (40),
	COLUMN_NAME Varchar2 (40),
	RESOURCE_NAME Varchar2 (40) NOT NULL,
    RESOURCE_CODE VARCHAR2 (45) NOT NULL,
	RESOURCE_DESCR Varchar2 (400),
primary key ("RESOURCE_ID") 
) 
/


Create table SBI_KPI_MODEL_RESOURCES (
	KPI_MODEL_RESOURCES_ID INTEGER NOT NULL,
	RESOURCE_ID INTEGER NOT NULL,
	KPI_MODEL_INST INTEGER NOT NULL,
 primary key (KPI_MODEL_RESOURCES_ID)
) 
/

Create table SBI_ALARM (
	ALARM_ID Number(38,0)  NOT NULL ,
	ID_KPI_INSTANCE Number(38,0),
	MODALITY_ID Number(38,0)  NOT NULL ,
	DOCUMENT_ID Number(38,0),
	LABEL Varchar2 (50) NOT NULL,
	NAME Varchar2 (50),
	DESCR Varchar2 (200),
	TEXT Varchar2 (1000),
	URL Varchar2 (20),
	SINGLE_EVENT Char (1),
	AUTO_DISABLED Char (1),
	ID_THRESHOLD_VALUE Number(38,0),
primary key ("ALARM_ID") 
)
/

Create table SBI_ALARM_EVENT (
	ALARM_EVENT_ID Number(38,0)  NOT NULL ,
	ALARM_ID Number(38,0)  NOT NULL ,
	EVENT_TS Timestamp(6),
	ACTIVE Char (1),
	KPI_VALUE Varchar2 (50),
	THRESHOLD_VALUE Varchar2 (50),
	KPI_NAME Varchar2 (100),
	RESOURCES Varchar2 (200),
	KPI_DESCRIPTION Varchar2 (100),
	RESOURCE_ID Number(38,0),
  KPI_INSTANCE_ID Number(38,0),
primary key ("ALARM_EVENT_ID") 
) 
/

Create table SBI_ALARM_DISTRIBUTION (
	ALARM_CONTACT_ID INTEGER NOT NULL,
	ALARM_ID INTEGER NOT NULL,
 Primary Key (ALARM_CONTACT_ID,ALARM_ID)
) 
/

Create table SBI_ALARM_CONTACT (
	ALARM_CONTACT_ID INTEGER NOT NULL,
	NAME VARCHAR2(100) NOT NULL,
	EMAIL VARCHAR2(100),
	MOBILE VARCHAR2(50),
	RESOURCES VARCHAR2(200),
 Primary Key (ALARM_CONTACT_ID)
) 
/

Create table SBI_EXPORTERS (
	ENGINE_ID INTEGER NOT NULL,
	DOMAIN_ID INTEGER NOT NULL,
	DEFAULT_VALUE Number(38,0) Default 0, 
Primary Key (DOMAIN_ID,ENGINE_ID)
) 
/

CREATE TABLE SBI_OBJ_METADATA (
	OBJ_META_ID 		INTEGER NOT NULL,
    LABEL	 	        VARCHAR2(20) NOT NULL,
    NAME 	            VARCHAR2(40) NOT NULL,
    DESCRIPTION	        VARCHAR2(100),  
    DATA_TYPE_ID		INTEGER NOT NULL,
    CREATION_DATE 	    TIMESTAMP(6) NOT NULL,    
    PRIMARY KEY (OBJ_META_ID)
)
/

CREATE TABLE SBI_OBJ_METACONTENTS (
  OBJ_METACONTENT_ID INTEGER  NOT NULL ,
  OBJMETA_ID 		 INTEGER  NOT NULL ,
  BIOBJ_ID 			 INTEGER  NOT NULL,
  SUBOBJ_ID 		 INTEGER,
  BIN_ID 			 INTEGER,
  CREATION_DATE 	 TIMESTAMP(6) NOT NULL,   
  LAST_CHANGE_DATE   TIMESTAMP(6) NOT NULL,   
    PRIMARY KEY (OBJ_METACONTENT_ID)
)
/

CREATE TABLE SBI_CONFIG (
	ID 				INTEGER NOT NULL,
	LABEL			VARCHAR2(100) NOT NULL,
	NAME			VARCHAR2(100) NULL,
	DESCRIPTION 	VARCHAR2(500) NULL,
	IS_ACTIVE 		SMALLINT Default 1,
	VALUE_CHECK 	VARCHAR2(1000) NULL,
	VALUE_TYPE_ID 	INTEGER NULL,    
 PRIMARY KEY (ID)
 )
/
 CREATE TABLE SBI_USER (
	USER_ID VARCHAR2(100) NOT NULL,
	PASSWORD VARCHAR2(150),
	FULL_NAME VARCHAR2(255),
	ID INTEGER NOT NULL,
	DT_PWD_BEGIN TIMESTAMP(6),
	DT_PWD_END TIMESTAMP(6),
	FLG_PWD_BLOCKED SMALLINT,
	DT_LAST_ACCESS TIMESTAMP(6),
 PRIMARY KEY (ID)
 )
/
CREATE TABLE SBI_ATTRIBUTE (
	ATTRIBUTE_NAME VARCHAR2(255) NOT NULL,
	DESCRIPTION VARCHAR2(500) NOT NULL,
	ATTRIBUTE_ID INTEGER NOT NULL,
 PRIMARY KEY (ATTRIBUTE_ID))
/
CREATE TABLE SBI_USER_ATTRIBUTES (
	ID INTEGER NOT NULL,
	ATTRIBUTE_ID INTEGER NOT NULL,
	ATTRIBUTE_VALUE VARCHAR2(500),
 PRIMARY KEY (ID,ATTRIBUTE_ID))
/

CREATE TABLE SBI_EXT_USER_ROLES (
	ID INTEGER NOT NULL,
	EXT_ROLE_ID INTEGER NOT NULL,
 PRIMARY KEY (ID,EXT_ROLE_ID))
/

CREATE TABLE SBI_UDP (
	UDP_ID	        INTEGER  NOT NULL,
	TYPE_ID			INTEGER NOT NULL,
	FAMILY_ID		INTEGER NOT NULL,
	LABEL           VARCHAR2(20) NOT NULL,
	NAME            VARCHAR2(40) NOT NULL,
	DESCRIPTION     VARCHAR2(1000) NULL,
	IS_MULTIVALUE   SMALLINT DEFAULT 0,    
 PRIMARY KEY ("UDP_ID"))
/
 
 CREATE TABLE SBI_UDP_VALUE (
	UDP_VALUE_ID       INTEGER  NOT NULL,
	UDP_ID			   INTEGER NOT NULL,
	VALUE              VARCHAR2(1000) NOT NULL,
	PROG               INTEGER NULL,
	LABEL              VARCHAR2(20) NULL,
	NAME               VARCHAR2(40) NULL,
	FAMILY			   VARCHAR2(40) NULL,
    BEGIN_TS           TIMESTAMP NOT NULL,
    END_TS             TIMESTAMP NULL,
    REFERENCE_ID	   INTEGER NULL,	
 PRIMARY KEY ("UDP_VALUE_ID"))
/
 
 
 CREATE TABLE SBI_KPI_ERROR (
  KPI_ERROR_ID        INTEGER   NOT NULL,
  KPI_MODEL_INST_ID   INTEGER   NOT NULL,
  USER_MSG            VARCHAR2(1000) NULL,
  FULL_MSG            CLOB   NULL,
  TS_DATE             TIMESTAMP NULL,
  LABEL_MOD_INST VARCHAR(100) ,
  PARAMETERS	   VARCHAR(1000),
  PRIMARY KEY ("KPI_ERROR_ID"))
/


CREATE TABLE SBI_KPI_REL (
  KPI_REL_ID INTEGER NOT NULL,
  KPI_FATHER_ID INTEGER  NOT NULL,
  KPI_CHILD_ID INTEGER  NOT NULL,
  PARAMETER VARCHAR2(100),
  PRIMARY KEY ("KPI_REL_ID")
)
/


CREATE TABLE SBI_ORG_UNIT (
  ID            INTEGER NOT NULL,
  LABEL            VARCHAR2(100) NOT NULL,
  NAME             VARCHAR2(200) NOT NULL,
  DESCRIPTION      VARCHAR2(1000),
  CONSTRAINT XAK1SBI_ORG_UNIT UNIQUE (LABEL, NAME),
  PRIMARY KEY(ID)
)
/

CREATE TABLE SBI_ORG_UNIT_HIERARCHIES (
  ID            INTEGER NOT NULL,
  LABEL            VARCHAR2(100) NOT NULL,
  NAME             VARCHAR2(200) NOT NULL,
  DESCRIPTION      VARCHAR2(1000),
  TARGET     VARCHAR2(1000),
  COMPANY    VARCHAR2(100) NOT NULL,
  CONSTRAINT XAK1SBI_ORG_UNIT_HIERARCHIES UNIQUE (LABEL, COMPANY),
  PRIMARY KEY(ID)
)
/

CREATE TABLE SBI_ORG_UNIT_NODES (
  NODE_ID            INTEGER NOT NULL,
  OU_ID           INTEGER NOT NULL,
  HIERARCHY_ID  INTEGER NOT NULL,
  PARENT_NODE_ID INTEGER NULL,
  PATH VARCHAR2(4000) NOT NULL,
  PRIMARY KEY(NODE_ID)
)
/

CREATE TABLE SBI_ORG_UNIT_GRANT (
  ID INTEGER NOT NULL,
  HIERARCHY_ID  INTEGER NOT NULL,
  KPI_MODEL_INST_NODE_ID INTEGER NOT NULL,
  START_DATE  DATE,
  END_DATE  DATE,
  LABEL            VARCHAR2(200) NOT NULL,
  NAME             VARCHAR2(400) NOT NULL,
  DESCRIPTION      VARCHAR2(1000),
  CONSTRAINT XAK1SBI_ORG_UNIT_GRANT UNIQUE (LABEL),
  PRIMARY KEY(ID)
)
/

CREATE TABLE SBI_ORG_UNIT_GRANT_NODES (
  NODE_ID INTEGER NOT NULL,
  KPI_MODEL_INST_NODE_ID INTEGER NOT NULL,
  GRANT_ID INTEGER NOT NULL,
  PRIMARY KEY(NODE_ID, KPI_MODEL_INST_NODE_ID, GRANT_ID)
)
/

COMMIT;

-- CREATE INDEXES SECTION

CREATE INDEX FK_SBI_AUDIT_1 ON SBI_AUDIT (DOC_REF) 
/
CREATE INDEX FK_SBI_AUDIT_2 ON SBI_AUDIT (ENGINE_REF) 
/
CREATE INDEX FK_SBI_AUDIT_3 ON SBI_AUDIT (SUBOBJ_REF) 
/
CREATE INDEX XIF3SBI_CHECKS ON SBI_CHECKS (VALUE_TYPE_ID) 
/
CREATE INDEX FK_SBI_DATA_SOURCE_1 ON SBI_DATA_SOURCE (DIALECT_ID) 
/
CREATE INDEX FK_SBI_DISTRIBUTION_LISTS_OBJE ON SBI_DIST_LIST_OBJECTS (DOC_ID) 
/
CREATE INDEX FK_SBI_DISTRIBUTION_LISTS_DLID ON SBI_DIST_LIST_OBJECTS (DL_ID) 
/
CREATE INDEX FK_SBI_DOSSIER_BINARY_CONTENTS ON SBI_DOSSIER_BIN_TEMP (PART_ID) 
/
CREATE INDEX FK_SBI_DOSSIER_TEMP_1 ON SBI_DOSSIER_TEMP (BIOBJ_ID) 
/
CREATE INDEX FK_SBI_DOSSIER_PRES_1 ON SBI_DOSSIER_PRES (BIN_ID) 
/
CREATE INDEX FK_SBI_DOSSIER_PRES_2 ON SBI_DOSSIER_PRES (BIOBJ_ID) 
/
CREATE INDEX FK_SBI_ENGINES_1 ON SBI_ENGINES (BIOBJ_TYPE) 
/
CREATE INDEX FK_SBI_ENGINES_2 ON SBI_ENGINES (ENGINE_TYPE) 
/
CREATE INDEX FK_SBI_ENGINES_3 ON SBI_ENGINES (DEFAULT_DS_ID) 
/
CREATE INDEX FK_SBI_EVENTS_ROLES_1 ON SBI_EVENTS_ROLES (ROLE_ID) 
/
CREATE INDEX XIF1SBI_EXT_ROLES ON SBI_EXT_ROLES (ROLE_TYPE_ID) 
/
CREATE INDEX XIF1SBI_FUNC_ROLE ON SBI_FUNC_ROLE (ROLE_ID) 
/
CREATE INDEX XIF2SBI_FUNC_ROLE ON SBI_FUNC_ROLE (FUNCT_ID) 
/
CREATE INDEX XIF4SBI_FUNC_ROLE ON SBI_FUNC_ROLE (STATE_ID) 
/
CREATE INDEX XIF1SBI_FUNCTIONS ON SBI_FUNCTIONS (FUNCT_TYPE_ID) 
/
CREATE INDEX XIF2SBI_FUNCTIONS ON SBI_FUNCTIONS (PARENT_FUNCT_ID) 
/
CREATE INDEX FK_GEO_MAP_FEATURES2 ON SBI_GEO_MAP_FEATURES (FEATURE_ID) 
/
CREATE INDEX XIF3SBI_LOV ON SBI_LOV (INPUT_TYPE_ID) 
/
CREATE INDEX XIF1SBI_OBJ_FUNC ON SBI_OBJ_FUNC (BIOBJ_ID) 
/
CREATE INDEX XIF2SBI_OBJ_FUNC ON SBI_OBJ_FUNC (FUNCT_ID) 
/
CREATE INDEX XIF1SBI_OBJ_PAR ON SBI_OBJ_PAR (PAR_ID) 
/
CREATE INDEX XIF2SBI_OBJ_PAR ON SBI_OBJ_PAR (BIOBJ_ID) 
/
CREATE INDEX FK_SBI_OBJ_PARUSE_2 ON SBI_OBJ_PARUSE (USE_ID) 
/
CREATE INDEX FK_SBI_OBJ_PARUSE_3 ON SBI_OBJ_PARUSE (OBJ_PAR_FATHER_ID) 
/
CREATE INDEX XIF3SBI_OBJ_STATE ON SBI_OBJ_STATE (BIOBJ_ID) 
/
CREATE INDEX XIF4SBI_OBJ_STATE ON SBI_OBJ_STATE (STATE_ID) 
/
CREATE INDEX FK_SBI_OBJECT_NOTES_1 ON SBI_OBJECT_NOTES (BIN_ID) 
/
CREATE INDEX FK_SBI_OBJECT_NOTES_2 ON SBI_OBJECT_NOTES (BIOBJ_ID) 
/
CREATE INDEX FK_SBI_OBJECT_TEMPLATES_1 ON SBI_OBJECT_TEMPLATES (BIN_ID) 
/
CREATE INDEX FK_SBI_OBJECT_TEMPLATES_2 ON SBI_OBJECT_TEMPLATES (BIOBJ_ID) 
/
CREATE INDEX XIF2SBI_OBJECTS ON SBI_OBJECTS (STATE_ID) 
/
CREATE INDEX XIF4SBI_OBJECTS ON SBI_OBJECTS (BIOBJ_TYPE_ID) 
/
CREATE INDEX XIF5SBI_OBJECTS ON SBI_OBJECTS (EXEC_MODE_ID) 
/
CREATE INDEX XIF6SBI_OBJECTS ON SBI_OBJECTS (STATE_CONS_ID) 
/
CREATE INDEX FK_SBI_OBJECTS_5 ON SBI_OBJECTS (ENGINE_ID) 
/
CREATE INDEX FK_SBI_OBJECTS_6 ON SBI_OBJECTS (DATA_SOURCE_ID) 
/
CREATE INDEX FK_SBI_OBJECTS_RATING_1 ON SBI_OBJECTS_RATING (OBJ_ID) 
/
CREATE INDEX XIF1SBI_PARAMETERS ON SBI_PARAMETERS (PAR_TYPE_ID) 
/
CREATE INDEX XIF1SBI_PARUSE ON SBI_PARUSE (PAR_ID) 
/
CREATE INDEX XIF2SBI_PARUSE ON SBI_PARUSE (LOV_ID) 
/
CREATE INDEX XIF1SBI_PARUSE_CK ON SBI_PARUSE_CK (USE_ID) 
/
CREATE INDEX XIF2SBI_PARUSE_CK ON SBI_PARUSE_CK (CHECK_ID) 
/
CREATE INDEX XIF2SBI_PARUSE_DET ON SBI_PARUSE_DET (EXT_ROLE_ID) 
/
CREATE INDEX XIF3SBI_PARUSE_DET ON SBI_PARUSE_DET (USE_ID) 
/
CREATE INDEX FK_SBI_REMEMBER_ME_1 ON SBI_REMEMBER_ME (BIOBJ_ID) 
/
CREATE INDEX FK_SBI_REMEMBER_ME_2 ON SBI_REMEMBER_ME (SUBOBJ_ID) 
/
CREATE INDEX FK_SBI_ROLE_TYPE_USER_FUNCTION ON SBI_ROLE_TYPE_USER_FUNC (USER_FUNCT_ID) 
/
CREATE INDEX FK_SBI_SNAPSHOTS_1 ON SBI_SNAPSHOTS (BIN_ID) 
/
CREATE INDEX FK_SBI_SNAPSHOTS_2 ON SBI_SNAPSHOTS (BIOBJ_ID) 
/
CREATE INDEX FK_SBI_SUBOBJECTS_1 ON SBI_SUBOBJECTS (BIN_ID) 
/
CREATE INDEX FK_SBI_SUBOBJECTS_2 ON SBI_SUBOBJECTS (BIOBJ_ID) 
/
CREATE INDEX FK_SBI_SUBREPORTS_2 ON SBI_SUBREPORTS (SUB_RPT_ID) 
/
CREATE INDEX FK_SBI_VIEWPOINTS_1 ON SBI_VIEWPOINTS (BIOBJ_ID) 
/
CREATE UNIQUE INDEX XAK1SBI_OBJ_METACONTENTS ON SBI_OBJ_METACONTENTS(OBJMETA_ID,BIOBJ_ID,SUBOBJ_ID)
/
CREATE UNIQUE INDEX XAK1SBI_USER ON SBI_USER(USER_ID)
/
CREATE UNIQUE INDEX XAK1SBI_UDP ON SBI_UDP(LABEL)
/
CREATE INDEX XIF3_SBI_SBI_UDP ON SBI_UDP(TYPE_ID  ASC)
/
CREATE INDEX XIF2SBI_SBI_UDP ON SBI_UDP(FAMILY_ID ASC)
/
CREATE INDEX XIF2SBI_SBI_UDP_VALUE ON SBI_UDP_VALUE(UDP_ID ASC)
/
-- UNIQUE INDEX FOR KPIS
CREATE UNIQUE INDEX label_unique ON SBI_ALARM (LABEL)
/
CREATE UNIQUE INDEX anarm_name_unique ON SBI_ALARM_CONTACT (NAME)
/
CREATE UNIQUE INDEX kpi_code_unique ON SBI_KPI (code)
/
CREATE UNIQUE INDEX model_cd_par_id_unique ON SBI_KPI_MODEL (KPI_MODEL_CD,KPI_PARENT_MODEL_ID)
/
CREATE UNIQUE INDEX model_lbl_unique ON SBI_KPI_MODEL (KPI_MODEL_LBL)
/
CREATE UNIQUE INDEX period_name_unique ON SBI_KPI_PERIODICITY (name)
/
CREATE UNIQUE INDEX threshold_code_unique ON SBI_THRESHOLD (code)
/
CREATE UNIQUE INDEX label_thId_unique ON SBI_THRESHOLD_VALUE (label,THRESHOLD_ID)
/
CREATE UNIQUE INDEX resource_name_unique ON SBI_RESOURCES (RESOURCE_CODE)
/
CREATE UNIQUE INDEX XAK1SBI_CONFIG ON SBI_CONFIG(LABEL)
/
CREATE INDEX XIF3SBI_CONFIG ON SBI_CONFIG (VALUE_TYPE_ID)
/
-- CREATE FOREIGN KEYS SECTION

ALTER TABLE SBI_DOSSIER_PRES ADD CONSTRAINT SBI_DOSSIER_PRES_1  FOREIGN KEY (BIN_ID) REFERENCES SBI_BINARY_CONTENTS (BIN_ID) 
/
ALTER TABLE SBI_DOSSIER_PRES ADD CONSTRAINT SBI_DOSSIER_PRES_2 FOREIGN KEY (BIOBJ_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID) 
/

ALTER TABLE SBI_OBJECT_NOTES ADD CONSTRAINT SBI_OBJECT_NOTES_1 FOREIGN KEY (BIN_ID) REFERENCES SBI_BINARY_CONTENTS (BIN_ID)
/ 
ALTER TABLE SBI_OBJECT_NOTES ADD CONSTRAINT SBI_OBJECT_NOTES_2 FOREIGN KEY (BIOBJ_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID) 
/

ALTER TABLE SBI_OBJECT_TEMPLATES ADD CONSTRAINT SBI_OBJECT_TEMPLATES_1 FOREIGN KEY (BIN_ID) REFERENCES SBI_BINARY_CONTENTS (BIN_ID)
/ 
ALTER TABLE SBI_OBJECT_TEMPLATES ADD CONSTRAINT SBI_OBJECT_TEMPLATES_2 FOREIGN KEY (BIOBJ_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID) 
/

ALTER TABLE SBI_SNAPSHOTS ADD CONSTRAINT SBI_SNAPSHOTS_1 FOREIGN KEY (BIN_ID) REFERENCES SBI_BINARY_CONTENTS (BIN_ID)
/ 
ALTER TABLE SBI_SNAPSHOTS ADD CONSTRAINT SBI_SNAPSHOTS_2 FOREIGN KEY (BIOBJ_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID) 
/

ALTER TABLE SBI_SUBOBJECTS ADD CONSTRAINT SBI_SUBOBJECTS_1 FOREIGN KEY (BIN_ID) REFERENCES SBI_BINARY_CONTENTS (BIN_ID)
/ 
ALTER TABLE SBI_SUBOBJECTS ADD CONSTRAINT SBI_SUBOBJECTS_2 FOREIGN KEY (BIOBJ_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID) 
/

ALTER TABLE SBI_PARUSE_CK ADD CONSTRAINT SBI_PARUSE_CK_1 FOREIGN KEY (CHECK_ID) REFERENCES SBI_CHECKS (CHECK_ID) 
/
ALTER TABLE SBI_PARUSE_CK ADD CONSTRAINT SBI_PARUSE_CK_2 FOREIGN KEY (USE_ID) REFERENCES SBI_PARUSE (USE_ID) 
/

ALTER TABLE SBI_ENGINES ADD CONSTRAINT SBI_ENGINES_1 FOREIGN KEY (DEFAULT_DS_ID) REFERENCES SBI_DATA_SOURCE (DS_ID)
/ 
ALTER TABLE SBI_ENGINES ADD CONSTRAINT SBI_ENGINES_2 FOREIGN KEY (BIOBJ_TYPE) REFERENCES SBI_DOMAINS (VALUE_ID) 
/
ALTER TABLE SBI_ENGINES ADD CONSTRAINT SBI_ENGINES_3 FOREIGN KEY (ENGINE_TYPE) REFERENCES SBI_DOMAINS (VALUE_ID) 
/

ALTER TABLE SBI_DIST_LIST_USER ADD CONSTRAINT SBI_DIST_LIST_USER_1 FOREIGN KEY (LIST_ID) REFERENCES SBI_DIST_LIST (DL_ID)  ON DELETE CASCADE
/

ALTER TABLE SBI_DIST_LIST_OBJECTS ADD CONSTRAINT SBI_DIST_LIST_OBJECTS_1 FOREIGN KEY (DL_ID) REFERENCES SBI_DIST_LIST (DL_ID)  ON DELETE CASCADE
/
ALTER TABLE SBI_DIST_LIST_OBJECTS ADD CONSTRAINT SBI_DIST_LIST_OBJECTS_2 FOREIGN KEY (DOC_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID)  ON DELETE CASCADE
/

ALTER TABLE SBI_CHECKS ADD CONSTRAINT SBI_CHECKS_1 FOREIGN KEY (VALUE_TYPE_ID) REFERENCES SBI_DOMAINS (VALUE_ID) 
/

ALTER TABLE SBI_DATA_SOURCE ADD CONSTRAINT SBI_DATA_SOURCE_1 FOREIGN KEY (DIALECT_ID) REFERENCES SBI_DOMAINS (VALUE_ID) 
/

ALTER TABLE SBI_EXT_ROLES ADD CONSTRAINT SBI_EXT_ROLES_1 FOREIGN KEY (ROLE_TYPE_ID) REFERENCES SBI_DOMAINS (VALUE_ID) 
/

ALTER TABLE SBI_FUNC_ROLE ADD CONSTRAINT SBI_FUNC_ROLE_1 FOREIGN KEY (STATE_ID) REFERENCES SBI_DOMAINS (VALUE_ID)
/
ALTER TABLE SBI_FUNC_ROLE ADD CONSTRAINT SBI_FUNC_ROLE_2 FOREIGN KEY (FUNCT_ID) REFERENCES SBI_FUNCTIONS (FUNCT_ID) 
/
ALTER TABLE SBI_FUNC_ROLE ADD CONSTRAINT SBI_FUNC_ROLE_3 FOREIGN KEY (ROLE_ID) REFERENCES SBI_EXT_ROLES (EXT_ROLE_ID) 
/

ALTER TABLE SBI_FUNCTIONS ADD CONSTRAINT SBI_FUNCTIONS_1 FOREIGN KEY (FUNCT_TYPE_ID) REFERENCES SBI_DOMAINS (VALUE_ID)
/ 
ALTER TABLE SBI_FUNCTIONS ADD CONSTRAINT SBI_FUNCTIONS_2 FOREIGN KEY (PARENT_FUNCT_ID) REFERENCES SBI_FUNCTIONS (FUNCT_ID) 
/

ALTER TABLE SBI_LOV ADD CONSTRAINT SBI_LOV_1 FOREIGN KEY (INPUT_TYPE_ID) REFERENCES SBI_DOMAINS (VALUE_ID) 
/

ALTER TABLE SBI_OBJ_STATE ADD CONSTRAINT SBI_OBJ_STATE_1 FOREIGN KEY (STATE_ID) REFERENCES SBI_DOMAINS (VALUE_ID) 
/
ALTER TABLE SBI_OBJ_STATE ADD CONSTRAINT SBI_OBJ_STATE_2 FOREIGN KEY (BIOBJ_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID) 
/

ALTER TABLE SBI_OBJECTS ADD CONSTRAINT SBI_OBJECTS_1 FOREIGN KEY (DATA_SOURCE_ID) REFERENCES SBI_DATA_SOURCE (DS_ID) 
/
ALTER TABLE SBI_OBJECTS ADD CONSTRAINT SBI_OBJECTS_2 FOREIGN KEY (STATE_CONS_ID) REFERENCES SBI_DOMAINS (VALUE_ID) 
/
ALTER TABLE SBI_OBJECTS ADD CONSTRAINT SBI_OBJECTS_3 FOREIGN KEY (STATE_ID) REFERENCES SBI_DOMAINS (VALUE_ID) 
/
ALTER TABLE SBI_OBJECTS ADD CONSTRAINT SBI_OBJECTS_4 FOREIGN KEY (BIOBJ_TYPE_ID) REFERENCES SBI_DOMAINS (VALUE_ID) 
/
ALTER TABLE SBI_OBJECTS ADD CONSTRAINT SBI_OBJECTS_5 FOREIGN KEY (EXEC_MODE_ID) REFERENCES SBI_DOMAINS (VALUE_ID)
/ 
ALTER TABLE SBI_OBJECTS ADD CONSTRAINT SBI_OBJECTS_6 FOREIGN KEY (ENGINE_ID) REFERENCES SBI_ENGINES (ENGINE_ID) 
/

ALTER TABLE SBI_PARAMETERS ADD CONSTRAINT SBI_PARAMETERS_1 FOREIGN KEY (PAR_TYPE_ID) REFERENCES SBI_DOMAINS (VALUE_ID) 
/

ALTER TABLE SBI_ROLE_TYPE_USER_FUNC ADD CONSTRAINT SBI_ROLE_TYPE_USER_FUNC_1 FOREIGN KEY (ROLE_TYPE_ID) REFERENCES SBI_DOMAINS (VALUE_ID)
/ 
ALTER TABLE SBI_ROLE_TYPE_USER_FUNC ADD CONSTRAINT SBI_ROLE_TYPE_USER_FUNC_2 FOREIGN KEY (USER_FUNCT_ID) REFERENCES SBI_USER_FUNC (USER_FUNCT_ID) 
/

ALTER TABLE SBI_DOSSIER_BIN_TEMP ADD CONSTRAINT SBI_DOSSIER_BIN_TEMP_1 FOREIGN KEY (PART_ID) REFERENCES SBI_DOSSIER_TEMP (PART_ID)  ON DELETE CASCADE
/

ALTER TABLE SBI_AUDIT ADD CONSTRAINT SBI_AUDIT_1 FOREIGN KEY (ENGINE_REF) REFERENCES SBI_ENGINES (ENGINE_ID)  ON DELETE SET NULL
/
ALTER TABLE SBI_AUDIT ADD CONSTRAINT SBI_AUDIT_2 FOREIGN KEY (DOC_REF) REFERENCES SBI_OBJECTS (BIOBJ_ID)  ON DELETE SET NULL
/
ALTER TABLE SBI_AUDIT ADD CONSTRAINT SBI_AUDIT_3 FOREIGN KEY (SUBOBJ_REF) REFERENCES SBI_SUBOBJECTS (SUBOBJ_ID)  ON DELETE SET NULL
/

ALTER TABLE SBI_EVENTS_ROLES ADD CONSTRAINT SBI_EVENTS_ROLES_1 FOREIGN KEY (EVENT_ID) REFERENCES SBI_EVENTS_LOG (ID)
/ 
ALTER TABLE SBI_EVENTS_ROLES ADD CONSTRAINT SBI_EVENTS_ROLES_2 FOREIGN KEY (ROLE_ID) REFERENCES SBI_EXT_ROLES (EXT_ROLE_ID) 
/


ALTER TABLE SBI_PARUSE_DET ADD CONSTRAINT SBI_PARUSE_DET_1 FOREIGN KEY (EXT_ROLE_ID) REFERENCES SBI_EXT_ROLES (EXT_ROLE_ID)
/ 
ALTER TABLE SBI_PARUSE_DET ADD CONSTRAINT SBI_PARUSE_DET_2 FOREIGN KEY (USE_ID) REFERENCES SBI_PARUSE (USE_ID) 
/


ALTER TABLE SBI_OBJ_FUNC ADD CONSTRAINT SBI_OBJ_FUNC_1 FOREIGN KEY (FUNCT_ID) REFERENCES SBI_FUNCTIONS (FUNCT_ID) 
/
ALTER TABLE SBI_OBJ_FUNC ADD CONSTRAINT SBI_OBJ_FUNC_2 FOREIGN KEY (BIOBJ_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID) 
/

ALTER TABLE SBI_GEO_MAPS ADD CONSTRAINT SBI_GEO_MAPS_1 FOREIGN KEY (BIN_ID) REFERENCES SBI_BINARY_CONTENTS (BIN_ID) 
/

ALTER TABLE SBI_GEO_MAP_FEATURES ADD CONSTRAINT SBI_GEO_MAP_FEATURES_1 FOREIGN KEY (FEATURE_ID) REFERENCES SBI_GEO_FEATURES (FEATURE_ID)
/ 
ALTER TABLE SBI_GEO_MAP_FEATURES ADD CONSTRAINT SBI_GEO_MAP_FEATURES_2 FOREIGN KEY (MAP_ID) REFERENCES SBI_GEO_MAPS (MAP_ID) 
/

ALTER TABLE SBI_PARUSE ADD CONSTRAINT SBI_PARUSE_1 FOREIGN KEY (LOV_ID) REFERENCES SBI_LOV (LOV_ID) 
/
ALTER TABLE SBI_PARUSE ADD CONSTRAINT SBI_PARUSE_2 FOREIGN KEY (PAR_ID) REFERENCES SBI_PARAMETERS (PAR_ID) 
/

ALTER TABLE SBI_OBJ_PARUSE ADD CONSTRAINT SBI_OBJ_PARUSE_1 FOREIGN KEY (OBJ_PAR_ID) REFERENCES SBI_OBJ_PAR (OBJ_PAR_ID) 
/
ALTER TABLE SBI_OBJ_PARUSE ADD CONSTRAINT SBI_OBJ_PARUSE_2 FOREIGN KEY (OBJ_PAR_FATHER_ID) REFERENCES SBI_OBJ_PAR (OBJ_PAR_ID)
/ 
ALTER TABLE SBI_OBJ_PARUSE ADD CONSTRAINT SBI_OBJ_PARUSE_3 FOREIGN KEY (USE_ID) REFERENCES SBI_PARUSE (USE_ID) 
/

ALTER TABLE SBI_DOSSIER_TEMP ADD CONSTRAINT SBI_DOSSIER_TEMP_1 FOREIGN KEY (BIOBJ_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID) 
/

ALTER TABLE SBI_OBJ_PAR ADD CONSTRAINT SBI_OBJ_PAR_1 FOREIGN KEY (BIOBJ_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID) 
/
ALTER TABLE SBI_OBJ_PAR ADD CONSTRAINT SBI_OBJ_PAR_2 FOREIGN KEY (PAR_ID) REFERENCES SBI_PARAMETERS (PAR_ID) 
/

ALTER TABLE SBI_OBJECTS_RATING ADD CONSTRAINT SBI_OBJECTS_RATING_1 FOREIGN KEY (OBJ_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID)  ON DELETE CASCADE
/

ALTER TABLE SBI_REMEMBER_ME ADD CONSTRAINT SBI_REMEMBER_ME_1 FOREIGN KEY (BIOBJ_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID)  ON DELETE CASCADE
/
ALTER TABLE SBI_REMEMBER_ME ADD CONSTRAINT SBI_REMEMBER_ME_2 FOREIGN KEY (SUBOBJ_ID) REFERENCES SBI_SUBOBJECTS (SUBOBJ_ID)  ON DELETE CASCADE
/

ALTER TABLE SBI_SUBREPORTS ADD CONSTRAINT SBI_SUBREPORTS_1 FOREIGN KEY (MASTER_RPT_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID)
/ 
ALTER TABLE SBI_SUBREPORTS ADD CONSTRAINT SBI_SUBREPORTS_2 FOREIGN KEY (SUB_RPT_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID) 
/

ALTER TABLE SBI_VIEWPOINTS ADD CONSTRAINT SBI_VIEWPOINTS_1 FOREIGN KEY (BIOBJ_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID) 
/

ALTER TABLE SBI_MENU_ROLE ADD CONSTRAINT SBI_MENU_ROLE_1 FOREIGN KEY (MENU_ID) REFERENCES SBI_MENU (MENU_ID) ON DELETE CASCADE
/
ALTER TABLE SBI_MENU_ROLE ADD CONSTRAINT SBI_MENU_ROLE_2 FOREIGN KEY (EXT_ROLE_ID) REFERENCES SBI_EXT_ROLES (EXT_ROLE_ID) ON DELETE CASCADE
/

ALTER TABLE SBI_DATA_SET ADD CONSTRAINT SBI_DATA_SET_1 FOREIGN KEY (TRANSFORMER_ID) REFERENCES SBI_DOMAINS (VALUE_ID) 
/
ALTER TABLE SBI_UDP ADD CONSTRAINT FK_SBI_SBI_UDP_1 FOREIGN KEY ( TYPE_ID ) REFERENCES SBI_DOMAINS ( VALUE_ID )
/
ALTER TABLE SBI_UDP ADD CONSTRAINT FK_SBI_SBI_UDP_2 FOREIGN KEY ( FAMILY_ID ) REFERENCES SBI_DOMAINS ( VALUE_ID )
/
ALTER TABLE SBI_UDP_VALUE ADD CONSTRAINT FK_SBI_UDP_VALUE_1 FOREIGN KEY ( UDP_ID ) REFERENCES SBI_UDP ( UDP_ID )
/
-- KPI DEFINITION
Alter table SBI_KPI_MODEL add CONSTRAINT SBI_KPI_MODEL_1 Foreign Key (KPI_MODEL_TYPE_ID) references SBI_DOMAINS (VALUE_ID)
/
Alter table SBI_KPI_MODEL add CONSTRAINT SBI_KPI_MODEL_2 Foreign Key (KPI_ID) references SBI_KPI (KPI_ID)
/
Alter table SBI_KPI_MODEL add CONSTRAINT SBI_KPI_MODEL_3 Foreign Key (KPI_PARENT_MODEL_ID) references SBI_KPI_MODEL (KPI_MODEL_ID)
/
Alter table SBI_MEASURE_UNIT add CONSTRAINT SBI_MEASURE_UNIT_1 Foreign Key (SCALE_TYPE_ID) references SBI_DOMAINS (VALUE_ID)
/
Alter table SBI_KPI add CONSTRAINT SBI_KPI_1 Foreign Key (DS_ID) references SBI_DATA_SET (DS_ID)
/
Alter table SBI_KPI add CONSTRAINT SBI_KPI_2 Foreign Key (id_kpi_parent) references SBI_KPI (KPI_ID)
/
Alter table SBI_KPI add CONSTRAINT SBI_KPI_3 Foreign Key (id_measure_unit) references SBI_MEASURE_UNIT (id_measure_unit)
/
Alter table SBI_KPI add CONSTRAINT SBI_KPI_4 Foreign Key (THRESHOLD_ID) references SBI_THRESHOLD (THRESHOLD_ID) 
/
Alter table SBI_KPI_DOCUMENTS add CONSTRAINT SBI_KPI_DOCUMENTS_1 Foreign Key (BIOBJ_ID) references SBI_OBJECTS (BIOBJ_ID)
/
Alter table SBI_KPI_DOCUMENTS add CONSTRAINT SBI_KPI_DOCUMENTS_2 Foreign Key (KPI_ID) references SBI_KPI (KPI_ID)
/
Alter table SBI_KPI_ROLE add CONSTRAINT SBI_KPI_ROLE_1 Foreign Key (EXT_ROLE_ID) references SBI_EXT_ROLES (EXT_ROLE_ID) 
/
Alter table SBI_KPI_ROLE add CONSTRAINT SBI_KPI_ROLE_2 Foreign Key (KPI_ID) references SBI_KPI (KPI_ID)
/
Alter table SBI_THRESHOLD add CONSTRAINT SBI_THRESHOLD_1 Foreign Key (THRESHOLD_TYPE_ID) references SBI_DOMAINS (VALUE_ID)
/
Alter table SBI_THRESHOLD_VALUE add CONSTRAINT SBI_THRESHOLD_VALUE_1 Foreign Key (SEVERITY_ID) references SBI_DOMAINS (VALUE_ID)
/
Alter table SBI_THRESHOLD_VALUE add CONSTRAINT SBI_THRESHOLD_VALUE_2 Foreign Key (THRESHOLD_ID) references SBI_THRESHOLD (THRESHOLD_ID) on delete cascade
/

-- KPI INSTANCE
Alter table SBI_KPI_MODEL_INST add CONSTRAINT SBI_KPI_MODEL_INST_1 Foreign Key (id_kpi_instance) references SBI_KPI_INSTANCE (id_kpi_instance)
/
Alter table SBI_KPI_MODEL_INST add CONSTRAINT SBI_KPI_MODEL_INST_2 Foreign Key (KPI_MODEL_INST_PARENT) references SBI_KPI_MODEL_INST (KPI_MODEL_INST)
/
Alter table SBI_KPI_MODEL_INST add CONSTRAINT SBI_KPI_MODEL_INST_3 Foreign Key (KPI_MODEL_ID) references SBI_KPI_MODEL (KPI_MODEL_ID)
/
Alter table SBI_KPI_INSTANCE add CONSTRAINT SBI_KPI_INSTANCE_1 Foreign Key (KPI_ID) references SBI_KPI (KPI_ID)
/
Alter table SBI_KPI_INSTANCE add CONSTRAINT SBI_KPI_INSTANCE_2 Foreign Key (id_measure_unit) references SBI_MEASURE_UNIT (id_measure_unit)
/
Alter table SBI_KPI_INSTANCE add CONSTRAINT SBI_KPI_INSTANCE_3 Foreign Key (THRESHOLD_ID) references SBI_THRESHOLD (THRESHOLD_ID)
/
Alter table SBI_KPI_INSTANCE add CONSTRAINT SBI_KPI_INSTANCE_4 Foreign Key (CHART_TYPE_ID) references SBI_DOMAINS (value_id)
/
Alter table SBI_KPI_INSTANCE_HISTORY add CONSTRAINT SBI_KPI_INSTANCE_HISTORY_1 Foreign Key (id_measure_unit) references SBI_MEASURE_UNIT (id_measure_unit) 
/
Alter table SBI_KPI_INSTANCE_HISTORY add CONSTRAINT SBI_KPI_INSTANCE_HISTORY_2 Foreign Key (THRESHOLD_ID) references SBI_THRESHOLD (THRESHOLD_ID)
/
Alter table SBI_KPI_INSTANCE_HISTORY add CONSTRAINT SBI_KPI_INSTANCE_HISTORY_3 Foreign Key (id_kpi_instance) references SBI_KPI_INSTANCE (id_kpi_instance) 
/
Alter table SBI_KPI_MODEL_RESOURCES add CONSTRAINT SBI_KPI_MODEL_RESOURCES_1 Foreign Key (KPI_MODEL_INST) references SBI_KPI_MODEL_INST (KPI_MODEL_INST)
/
Alter table SBI_KPI_MODEL_RESOURCES add CONSTRAINT SBI_KPI_MODEL_RESOURCES_2 Foreign Key (RESOURCE_ID) references SBI_RESOURCES (RESOURCE_ID)
/
Alter table SBI_RESOURCES add CONSTRAINT SBI_RESOURCES_1 Foreign Key (RESOURCE_TYPE_ID) references SBI_DOMAINS (VALUE_ID)
/
Alter table SBI_KPI_VALUE add CONSTRAINT SBI_KPI_VALUE_1 Foreign Key (id_kpi_instance) references SBI_KPI_INSTANCE (id_kpi_instance)
/
Alter table SBI_KPI_VALUE add CONSTRAINT SBI_KPI_VALUE_2 Foreign Key (RESOURCE_ID) references SBI_RESOURCES (RESOURCE_ID)
/
Alter TABLE SBI_KPI_INST_PERIOD ADD CONSTRAINT SBI_KPI_INST_PERIOD_1 FOREIGN KEY  (KPI_INSTANCE_ID) REFERENCES SBI_KPI_INSTANCE (id_kpi_instance)
/
Alter TABLE SBI_KPI_INST_PERIOD ADD CONSTRAINT SBI_KPI_INST_PERIOD_2 FOREIGN KEY (PERIODICITY_ID) REFERENCES SBI_KPI_PERIODICITY (ID_KPI_PERIODICITY)
/

-- KPI ALARM
Alter table SBI_ALARM add CONSTRAINT SBI_ALARM_1 Foreign Key (MODALITY_ID) references SBI_DOMAINS (VALUE_ID)
/
Alter table SBI_ALARM add CONSTRAINT SBI_ALARM_2 Foreign Key (DOCUMENT_ID) references SBI_OBJECTS (BIOBJ_ID)
/
Alter table SBI_ALARM add CONSTRAINT SBI_ALARM_3 Foreign Key (id_kpi_instance) references SBI_KPI_INSTANCE (id_kpi_instance) 
/
Alter table SBI_ALARM add CONSTRAINT SBI_ALARM_4 Foreign Key (id_threshold_value) references SBI_THRESHOLD_VALUE (ID_THRESHOLD_VALUE)
/
Alter table SBI_ALARM_EVENT add CONSTRAINT SBI_ALARM_EVENT_1 Foreign Key (ALARM_ID) references SBI_ALARM (ALARM_ID)
/
Alter table SBI_ALARM_DISTRIBUTION add CONSTRAINT SBI_ALARM_DISTRIBUTION_1 Foreign Key (ALARM_ID) references SBI_ALARM (ALARM_ID)
/
Alter table SBI_ALARM_DISTRIBUTION add CONSTRAINT SBI_ALARM_DISTRIBUTION_2 Foreign Key (ALARM_CONTACT_ID) references SBI_ALARM_CONTACT (ALARM_CONTACT_ID)
/
Alter table SBI_KPI add CONSTRAINT SBI_KPI_11 Foreign Key (KPI_TYPE) references SBI_DOMAINS (VALUE_ID)
/
Alter table SBI_KPI add CONSTRAINT SBI_KPI_12 Foreign Key (METRIC_SCALE_TYPE) references SBI_DOMAINS (VALUE_ID)
/
Alter table SBI_KPI add CONSTRAINT SBI_KPI_13 Foreign Key (MEASURE_TYPE) references SBI_DOMAINS (VALUE_ID)
/
Alter table SBI_EXPORTERS add CONSTRAINT SBI_EXPORTERS_12 Foreign Key (ENGINE_ID) references SBI_ENGINES (ENGINE_ID)
/
Alter table SBI_EXPORTERS add CONSTRAINT SBI_EXPORTERS_13 Foreign Key (DOMAIN_ID) references SBI_DOMAINS (VALUE_ID)
/
ALTER TABLE SBI_OBJ_METADATA ADD CONSTRAINT FK_SBI_OBJ_METADATA_1 FOREIGN KEY ( DATA_TYPE_ID ) REFERENCES SBI_DOMAINS(VALUE_ID)
/
ALTER TABLE SBI_OBJ_METACONTENTS ADD CONSTRAINT FK_SBI_OBJ_METACONTENTS_1 FOREIGN KEY  ( OBJMETA_ID ) REFERENCES SBI_OBJ_METADATA (  OBJ_META_ID )
/
ALTER TABLE SBI_OBJ_METACONTENTS ADD CONSTRAINT FK_SBI_OBJ_METACONTENTS_2 FOREIGN KEY  ( BIOBJ_ID )   REFERENCES SBI_OBJECTS (  BIOBJ_ID )
/
ALTER TABLE SBI_OBJ_METACONTENTS ADD CONSTRAINT FK_SBI_OBJ_METACONTENTS_3 FOREIGN KEY  ( SUBOBJ_ID )  REFERENCES SBI_SUBOBJECTS (  SUBOBJ_ID )
/
ALTER TABLE SBI_OBJ_METACONTENTS ADD CONSTRAINT FK_SBI_OBJ_METACONTENTS_4 FOREIGN KEY  ( BIN_ID )     REFERENCES SBI_BINARY_CONTENTS(BIN_ID)
/
ALTER TABLE SBI_CONFIG ADD CONSTRAINT FK_sbi_config_1 FOREIGN KEY ( VALUE_TYPE_ID ) REFERENCES SBI_DOMAINS ( VALUE_ID )
/
ALTER TABLE SBI_USER_ATTRIBUTES ADD CONSTRAINT FK_sbi_user_attributes_1 FOREIGN KEY (ID) REFERENCES SBI_USER (ID) 
/
ALTER TABLE SBI_EXT_USER_ROLES ADD CONSTRAINT FK_sbi_ext_user_roles_1 FOREIGN KEY (ID) REFERENCES SBI_USER (ID)
/
ALTER TABLE SBI_USER_ATTRIBUTES ADD CONSTRAINT FK_sbi_user_attributes_2 FOREIGN KEY (ATTRIBUTE_ID) REFERENCES SBI_ATTRIBUTE (ATTRIBUTE_ID)
/
ALTER TABLE SBI_EXT_USER_ROLES ADD CONSTRAINT FK_sbi_ext_user_roles_2 FOREIGN KEY (EXT_ROLE_ID) REFERENCES SBI_EXT_ROLES (EXT_ROLE_ID)
/
ALTER TABLE SBI_KPI_ERROR ADD CONSTRAINT FK_SBI_KPI_ERROR_MODEL_1 FOREIGN KEY ( KPI_MODEL_INST_ID ) REFERENCES SBI_KPI_MODEL_INST ( KPI_MODEL_INST )
/
ALTER TABLE SBI_KPI_REL ADD CONSTRAINT FK_SBI_KPI_REL_3 FOREIGN KEY  ( KPI_FATHER_ID ) REFERENCES SBI_KPI ( KPI_ID );
/
ALTER TABLE SBI_KPI_REL ADD CONSTRAINT FK_SBI_KPI_REL_4 FOREIGN KEY ( KPI_CHILD_ID ) REFERENCES SBI_KPI ( KPI_ID );
/

-- Organizational Unit
ALTER TABLE SBI_ORG_UNIT_NODES ADD CONSTRAINT FK_SBI_ORG_UNIT_NODES_1 FOREIGN KEY ( OU_ID ) REFERENCES SBI_ORG_UNIT ( ID )
/
ALTER TABLE SBI_ORG_UNIT_NODES ADD CONSTRAINT FK_SBI_ORG_UNIT_NODES_2 FOREIGN KEY ( HIERARCHY_ID ) REFERENCES SBI_ORG_UNIT_HIERARCHIES ( ID )
/
ALTER TABLE SBI_ORG_UNIT_NODES ADD CONSTRAINT FK_SBI_ORG_UNIT_NODES_3 FOREIGN KEY ( PARENT_NODE_ID ) REFERENCES SBI_ORG_UNIT_NODES ( NODE_ID )
/
ALTER TABLE SBI_ORG_UNIT_GRANT ADD CONSTRAINT FK_SBI_ORG_UNIT_GRANT_2 FOREIGN KEY ( HIERARCHY_ID ) REFERENCES SBI_ORG_UNIT_HIERARCHIES ( ID )
/
ALTER TABLE SBI_ORG_UNIT_GRANT ADD CONSTRAINT FK_SBI_ORG_UNIT_GRANT_3 FOREIGN KEY ( KPI_MODEL_INST_NODE_ID ) REFERENCES SBI_KPI_MODEL_INST ( KPI_MODEL_INST )
/
ALTER TABLE SBI_ORG_UNIT_GRANT_NODES ADD CONSTRAINT FK_SBI_ORG_UNIT_GRANT_NODES_1 FOREIGN KEY ( NODE_ID ) REFERENCES SBI_ORG_UNIT_NODES ( NODE_ID )
/
ALTER TABLE SBI_ORG_UNIT_GRANT_NODES ADD CONSTRAINT FK_SBI_ORG_UNIT_GRANT_NODES_2 FOREIGN KEY ( KPI_MODEL_INST_NODE_ID ) REFERENCES SBI_KPI_MODEL_INST ( KPI_MODEL_INST )
/
ALTER TABLE SBI_ORG_UNIT_GRANT_NODES ADD CONSTRAINT FK_SBI_ORG_UNIT_GRANT_NODES_3 FOREIGN KEY ( GRANT_ID ) REFERENCES SBI_ORG_UNIT_GRANT ( ID )
/

-- CREATE OBJECT TABLES SECTION


-- CREATE XMLTYPE TABLES SECTION


-- CREATE FUNCTIONS SECTION


-- CREATE SEQUENCES SECTION

--sequence on old tables (spagobi 1.9.x)
CREATE SEQUENCE SBI_CHECKS_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_DOMAINS_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_ENGINES_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_EXT_ROLES_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_FUNCTIONS_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_LOV_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_MENU_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_OBJECTS_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_PARAMETERS_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_PARUSE_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_OBJ_PAR_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_EVENTS_LOG_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;

CREATE SEQUENCE SBI_AUDIT_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;

CREATE SEQUENCE SBI_ACTIVITY_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;

CREATE SEQUENCE SBI_VIEWPOINTS_SEQ
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;

--sequence on new tables (spagobi 2)
CREATE SEQUENCE SBI_GEO_MAPS_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_GEO_FEATURES_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_DATA_SOURCE_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_BINARY_CONTENTS_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_OBJECT_TEMPLATES_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_OBJECT_NOTES_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_SUBOBJECTS_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_SNAPSHOTS_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_USER_FUNC_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_DOSSIER_PRES_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_DOSSIER_TEMP_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_DOSSIER_BIN_TEMP_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_REMEMBER_ME_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_DATA_SET_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_DIST_LIST_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_DIST_LIST_USER_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_DIST_LIST_OBJECTS_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_UDP_VALUE_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/
CREATE SEQUENCE SBI_UDP_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/
CREATE SEQUENCE SBI_KPI_INSTANCE_HISTORY_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/
CREATE SEQUENCE SBI_KPI_INSTANCE_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 1e+21 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/
CREATE SEQUENCE SBI_KPI_MODEL_INST_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 10000000000000000000 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/
CREATE SEQUENCE SBI_KPI_MODEL_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 10000000000000000 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/
CREATE SEQUENCE SBI_KPI_VALUE_SEQ INCREMENT BY 1 START WITH 21 MAXVALUE 100000000000000010000 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/
CREATE SEQUENCE SBI_KPI_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/
CREATE SEQUENCE SBI_KPI_INST_PERIOD_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/
CREATE SEQUENCE SBI_KPI_MODEL_RESOURCES_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/
CREATE SEQUENCE SBI_KPI_DOCUMENTS_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/
CREATE SEQUENCE RESOURCES_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/
CREATE SEQUENCE SBI_THRESHOLD_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/
CREATE SEQUENCE SBI_THRESHOLD_VAULE_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/
CREATE SEQUENCE SBI_KPI_PERIODICITY_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/
CREATE SEQUENCE SBI_MEASURE_UNIT_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/
CREATE SEQUENCE SBI_OBJ_METADATA_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/
CREATE SEQUENCE SBI_OBJ_METACONTENTS_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/
CREATE SEQUENCE SBI_CONFIG_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/
CREATE SEQUENCE SBI_KPI_ERROR_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/

COMMIT;

--create trigger 
create trigger TRG_SBI_CHECKS
  BEFORE INSERT
  on SBI_CHECKS
  REFERENCING OLD AS old NEW AS new
  for each row
  declare nuovo_id number;
begin
IF :new.CHECK_ID IS NULL THEN
     select SBI_CHECKS_SEQ.nextval into nuovo_id from dual;
     :new.CHECK_ID:=nuovo_id;
END IF;
end;
/

create trigger TRG_SBI_DOMAINS
  BEFORE INSERT
  on SBI_DOMAINS
  REFERENCING OLD AS old NEW AS new
  for each row
  declare nuovo_id number;
begin
IF :new.VALUE_ID IS NULL THEN
     select SBI_DOMAINS_SEQ.nextval into nuovo_id from dual;
     :new.VALUE_ID:=nuovo_id;
END IF;
end;
/

create trigger TRG_SBI_ENGINES
  BEFORE INSERT
  on SBI_ENGINES
  REFERENCING OLD AS old NEW AS new
  for each row
  declare nuovo_id number;
begin
IF :new.ENGINE_ID IS NULL THEN
     select SBI_ENGINES_SEQ.nextval into nuovo_id from dual;
     :new.ENGINE_ID:=nuovo_id;
END IF;
end;
/

create trigger TRG_SBI_EXT_ROLES
  BEFORE INSERT
  on SBI_EXT_ROLES
  REFERENCING OLD AS old NEW AS new
  for each row
  declare nuovo_id number;
begin
IF :new.EXT_ROLE_ID IS NULL THEN
     select SBI_EXT_ROLES_SEQ.nextval into nuovo_id from dual;
     :new.EXT_ROLE_ID:=nuovo_id;
END IF;
end;
/

create trigger TRG_SBI_FUNCTIONS
  BEFORE INSERT
  on SBI_FUNCTIONS
  REFERENCING OLD AS old NEW AS new
  for each row
  declare nuovo_id number;
begin
IF :new.FUNCT_ID IS NULL THEN
     select SBI_FUNCTIONS_SEQ.nextval into nuovo_id from dual;
     :new.FUNCT_ID:=nuovo_id;
END IF;
end;
/

create trigger TRG_SBI_LOV
  BEFORE INSERT
  on SBI_LOV
  REFERENCING OLD AS old NEW AS new
  for each row
  declare nuovo_id number;
begin
IF :new.LOV_ID IS NULL THEN
     select SBI_LOV_SEQ.nextval into nuovo_id from dual;
     :new.LOV_ID:=nuovo_id;
END IF;
end;
/

create trigger TRG_SBI_MENU
  BEFORE INSERT
  on SBI_MENU
  REFERENCING OLD AS old NEW AS new
  for each row
  declare nuovo_id number;
begin
IF :new.MENU_ID IS NULL THEN
     select SBI_MENU_SEQ.nextval into nuovo_id from dual;
     :new.MENU_ID:=nuovo_id;
END IF;
end;
/

create trigger TRG_SBI_OBJECTS
  BEFORE INSERT
  on SBI_OBJECTS
  REFERENCING OLD AS old NEW AS new
  for each row
  declare nuovo_id number;
begin
IF :new.BIOBJ_ID IS NULL THEN
     select SBI_OBJECTS_SEQ.nextval into nuovo_id from dual;
     :new.BIOBJ_ID:=nuovo_id;
END IF;
end;
/

create trigger TRG_SBI_PARAMETERS
  BEFORE INSERT
  on SBI_PARAMETERS
  REFERENCING OLD AS old NEW AS new
  for each row
  declare nuovo_id number;
begin
IF :new.PAR_ID IS NULL THEN
     select SBI_PARAMETERS_SEQ.nextval into nuovo_id from dual;
     :new.PAR_ID:=nuovo_id;
END IF;
end;
/

create trigger TRG_SBI_PARUSE
  BEFORE INSERT
  on SBI_PARUSE
  REFERENCING OLD AS old NEW AS new
  for each row
  declare nuovo_id number;
begin
IF :new.USE_ID IS NULL THEN
     select SBI_PARUSE_SEQ.nextval into nuovo_id from dual;
     :new.USE_ID:=nuovo_id;
END IF;
end;
/

create trigger TRG_SBI_OBJ_PAR
  BEFORE INSERT
  on SBI_OBJ_PAR
  REFERENCING OLD AS old NEW AS new
  for each row
  declare nuovo_id number;
begin
IF :new.OBJ_PAR_ID IS NULL THEN
     select SBI_OBJ_PAR_SEQ.nextval into nuovo_id from dual;
     :new.OBJ_PAR_ID:=nuovo_id;
END IF;
end;
/

create trigger TRG_SBI_EVENTS_LOG
  BEFORE INSERT
  on SBI_EVENTS_LOG
  REFERENCING OLD AS old NEW AS new
  for each row
  declare nuovo_id number;
begin
IF :new.ID IS NULL THEN
     select SBI_EVENTS_LOG_SEQ.nextval into nuovo_id from dual;
     :new.ID:=nuovo_id;
END IF;
end;
/

create trigger TRG_SBI_AUDIT
  BEFORE INSERT
  on SBI_AUDIT
  REFERENCING OLD AS old NEW AS new
  for each row
  declare nuovo_id number;
begin
IF :new.ID IS NULL THEN
     select SBI_AUDIT_SEQ.nextval into nuovo_id from dual;
     :new.ID:=nuovo_id;
END IF;
end;
/

create trigger TRG_SBI_ACTIVITY_MONITORING
  BEFORE INSERT
  on SBI_ACTIVITY_MONITORING
  REFERENCING OLD AS old NEW AS new
  for each row
  declare nuovo_id number;
begin
IF :new.ID IS NULL THEN
     select SBI_ACTIVITY_SEQ.nextval into nuovo_id from dual;
     :new.ID:=nuovo_id;
END IF;
end;
/


--create trigger new  tables (spagobi 2)
CREATE TRIGGER TRG_SBI_DIST_LIST_OBJECTS
  BEFORE INSERT
  ON SBI_DIST_LIST_OBJECTS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.DL_ID IS NULL THEN
     SELECT SBI_DIST_LIST_OBJECTS_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.DL_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_DIST_LIST_USER
  BEFORE INSERT
  ON SBI_DIST_LIST_USER
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.DLU_ID IS NULL THEN
     SELECT SBI_DIST_LIST_USER_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.DLU_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_DIST_LIST
  BEFORE INSERT
  ON SBI_DIST_LIST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.DL_ID IS NULL THEN
     SELECT SBI_DIST_LIST_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.DL_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_DATA_SET
  BEFORE INSERT
  ON SBI_DATA_SET
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.DS_ID IS NULL THEN
     SELECT SBI_DATA_SET_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.DS_ID:=NUOVO_ID;
END IF;
END;
/
CREATE TRIGGER TRG_SBI_REMEMBER_ME
  BEFORE INSERT
  ON SBI_REMEMBER_ME
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.ID IS NULL THEN
     SELECT SBI_REMEMBER_ME_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_DOSSIER_BIN_TEMP
  BEFORE INSERT
  ON  SBI_DOSSIER_BIN_TEMP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.BIN_ID IS NULL THEN
     SELECT SBI_DOSSIER_BIN_TEMP_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.BIN_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_DOSSIER_TEMP
  BEFORE INSERT
  ON SBI_DOSSIER_TEMP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.PART_ID IS NULL THEN
     SELECT SBI_DOSSIER_TEMP_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.PART_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_DOSSIER_PRES
  BEFORE INSERT
  ON SBI_DOSSIER_PRES
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.PRESENTATION_ID IS NULL THEN
     SELECT SBI_DOSSIER_PRES_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.PRESENTATION_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_USER_FUNC
  BEFORE INSERT
  ON SBI_USER_FUNC
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.USER_FUNCT_ID IS NULL THEN
     SELECT SBI_USER_FUNC_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.USER_FUNCT_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_SNAPSHOTS
  BEFORE INSERT
  ON SBI_SNAPSHOTS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.SNAP_ID IS NULL THEN
     SELECT SBI_SNAPSHOTS_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.SNAP_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_SUBOBJECTS
  BEFORE INSERT
  ON SBI_SUBOBJECTS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.SUBOBJ_ID IS NULL THEN
     SELECT SBI_SUBOBJECTS_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.SUBOBJ_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_OBJECT_NOTES
  BEFORE INSERT
  ON SBI_OBJECT_NOTES
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.OBJ_NOTE_ID IS NULL THEN
     SELECT SBI_OBJECT_NOTES_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.OBJ_NOTE_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_OBJECT_TEMPLATES
  BEFORE INSERT
  ON SBI_OBJECT_TEMPLATES
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.OBJ_TEMP_ID IS NULL THEN
     SELECT SBI_OBJECT_TEMPLATES_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.OBJ_TEMP_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_BINARY_CONTENTS
  BEFORE INSERT
  ON SBI_BINARY_CONTENTS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.BIN_ID IS NULL THEN
     SELECT SBI_BINARY_CONTENTS_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.BIN_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_DATA_SOURCE
  BEFORE INSERT
  ON SBI_DATA_SOURCE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.DS_ID IS NULL THEN
     SELECT SBI_DATA_SOURCE_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.DS_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_GEO_FEATURES
  BEFORE INSERT
  ON SBI_GEO_FEATURES
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.FEATURE_ID IS NULL THEN
     SELECT SBI_GEO_FEATURES_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.FEATURE_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_GEO_MAPS
  BEFORE INSERT
  ON SBI_GEO_MAPS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.MAP_ID IS NULL THEN
     SELECT SBI_GEO_MAPS_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.MAP_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_KPI_INSTANCE_HISTORY
  BEFORE INSERT
  ON SBI_KPI_INSTANCE_HISTORY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.ID_KPI_INSTANCE_HISTORY IS NULL THEN
     SELECT SBI_KPI_INSTANCE_HISTORY_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.ID_KPI_INSTANCE_HISTORY:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_KPI_INSTANCE
  BEFORE INSERT
  ON SBI_KPI_INSTANCE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.ID_KPI_INSTANCE IS NULL THEN
     SELECT SBI_KPI_INSTANCE_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.ID_KPI_INSTANCE:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_KPI_MODEL_INST
  BEFORE INSERT
  ON SBI_KPI_MODEL_INST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.KPI_MODEL_INST IS NULL THEN
     SELECT SBI_KPI_MODEL_INST_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.KPI_MODEL_INST:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_KPI_MODEL
  BEFORE INSERT
  ON SBI_KPI_MODEL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.KPI_MODEL_ID IS NULL THEN
     SELECT SBI_KPI_MODEL_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.KPI_MODEL_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_KPI_VALUE
  BEFORE INSERT
  ON SBI_KPI_VALUE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.ID_KPI_INSTANCE_VALUE IS NULL THEN
     SELECT SBI_KPI_VALUE_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.ID_KPI_INSTANCE_VALUE:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_KPI
  BEFORE INSERT
  ON SBI_KPI
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.KPI_ID IS NULL THEN
     SELECT SBI_KPI_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.KPI_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_KPI_INST_PERIOD
  BEFORE INSERT
  ON SBI_KPI_INST_PERIOD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.KPI_INST_PERIOD_ID IS NULL THEN
     SELECT SBI_KPI_INST_PERIOD_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.KPI_INST_PERIOD_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_KPI_MODEL_RESOURCES
  BEFORE INSERT
  ON SBI_KPI_MODEL_RESOURCES
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.KPI_MODEL_RESOURCES_ID IS NULL THEN
     SELECT SBI_KPI_MODEL_RESOURCES_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.KPI_MODEL_RESOURCES_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_KPI_DOCUMENTS
  BEFORE INSERT
  ON SBI_KPI_DOCUMENTS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.ID_KPI_DOC IS NULL THEN
     SELECT SBI_KPI_DOCUMENTS_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.ID_KPI_DOC:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_RESOURCES
  BEFORE INSERT
  ON SBI_RESOURCES
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.RESOURCE_ID IS NULL THEN
     SELECT RESOURCES_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.RESOURCE_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_THRESHOLD
  BEFORE INSERT
  ON SBI_THRESHOLD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.THRESHOLD_ID IS NULL THEN
     SELECT SBI_THRESHOLD_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.THRESHOLD_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_THRESHOLD_VAULE
  BEFORE INSERT
  ON SBI_THRESHOLD_VALUE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.ID_THRESHOLD_VALUE IS NULL THEN
     SELECT SBI_THRESHOLD_VAULE_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.ID_THRESHOLD_VALUE:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_KPI_PERIODICITY
  BEFORE INSERT
  ON SBI_KPI_PERIODICITY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.ID_KPI_PERIODICITY IS NULL THEN
     SELECT SBI_KPI_PERIODICITY_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.ID_KPI_PERIODICITY:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_MEASURE_UNIT
  BEFORE INSERT
  ON SBI_MEASURE_UNIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.ID_MEASURE_UNIT IS NULL THEN
     SELECT SBI_MEASURE_UNIT_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.ID_MEASURE_UNIT:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_OBJ_METADATA
  BEFORE INSERT
  ON SBI_OBJ_METADATA
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.OBJ_META_ID IS NULL THEN
     SELECT SBI_OBJ_METADATA_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.OBJ_META_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_OBJ_METACONTENTS
  BEFORE INSERT
  ON SBI_OBJ_METACONTENTS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.OBJ_METACONTENT_ID IS NULL THEN
     SELECT SBI_OBJ_METACONTENTS_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.OBJ_METACONTENT_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_CONFIG
  BEFORE INSERT
  ON SBI_CONFIG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.ID IS NULL THEN
     SELECT SBI_CONFIG_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_UDP
  BEFORE INSERT
  ON SBI_UDP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.UDP_ID IS NULL THEN
     SELECT SBI_UDP_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.UDP_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_UDP_VALUE
  BEFORE INSERT
  ON SBI_UDP_VALUE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.UDP_VALUE_ID IS NULL THEN
     SELECT SBI_UDP_VALUE_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.UDP_VALUE_ID:=NUOVO_ID;
END IF;
END;
/


CREATE TABLE SBI_GOAL (
  GOAL_ID       INTEGER NOT NULL,
  GRANT_ID      INTEGER NOT NULL,
  START_DATE    DATE NOT NULL,
  END_DATE      DATE NOT NULL,
  NAME          VARCHAR2(20) NOT NULL,
  LABEL          VARCHAR2(20),
  DESCRIPTION		VARCHAR2(1000),
  PRIMARY KEY (GOAL_ID)
);


CREATE TABLE SBI_GOAL_HIERARCHY (
  GOAL_HIERARCHY_ID INTEGER NOT NULL,
  ORG_UNIT_ID       INTEGER NOT NULL,
  GOAL_ID           INTEGER NOT NULL,
  PARENT_ID         INTEGER,
  NAME              VARCHAR2(50) NOT NULL,
  LABEL             VARCHAR2(50),
  GOAL              VARCHAR2(1000),
  PRIMARY KEY (GOAL_HIERARCHY_ID)
);


CREATE TABLE SBI_GOAL_KPI (
  GOAL_KPI_ID         INTEGER NOT NULL,
  KPI_INSTANCE_ID     INTEGER NOT NULL,
  GOAL_HIERARCHY_ID   INTEGER NOT NULL,
  WEIGHT1             NUMBER(20,2),
  WEIGHT2             NUMBER(20,2),
  THRESHOLD1          NUMBER(20,2),
  THRESHOLD2          NUMBER(20,2),
  THRESHOLD1SIGN      INTEGER,
  THRESHOLD2SIGN      INTEGER,
  PRIMARY KEY (GOAL_KPI_ID)
);

ALTER TABLE SBI_GOAL ADD CONSTRAINT FK_GRANT_ID_GRANT FOREIGN KEY  (GRANT_ID) REFERENCES SBI_ORG_UNIT_GRANT (ID) ON DELETE CASCADE;
                
ALTER TABLE SBI_GOAL_HIERARCHY ADD CONSTRAINT FK_SBI_GOAL_HIERARCHY_GOAL FOREIGN KEY  (GOAL_ID) REFERENCES SBI_GOAL (GOAL_ID) ON DELETE CASCADE;
ALTER TABLE SBI_GOAL_HIERARCHY ADD CONSTRAINT FK_SBI_GOAL_HIERARCHY_PARENT FOREIGN KEY  (PARENT_ID) REFERENCES SBI_GOAL_HIERARCHY (GOAL_HIERARCHY_ID) ON DELETE CASCADE;
 
ALTER TABLE SBI_GOAL_KPI ADD CONSTRAINT FK_SBI_GOAL_KPI_GOAL FOREIGN KEY  (GOAL_HIERARCHY_ID) REFERENCES SBI_GOAL_HIERARCHY (GOAL_HIERARCHY_ID)  ON DELETE CASCADE;
ALTER TABLE SBI_GOAL_KPI ADD CONSTRAINT FK_SBI_GOAL_KPI_KPI FOREIGN KEY  (KPI_INSTANCE_ID) REFERENCES SBI_KPI_MODEL_INST (KPI_MODEL_INST) ON DELETE CASCADE;


CREATE SEQUENCE SBI_GOAL_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;

CREATE SEQUENCE SBI_GOAL_HIERARCHY_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;                

CREATE SEQUENCE SBI_GOAL_KPI_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;      


create trigger TRG_SBI_GOAL
  BEFORE INSERT
  on SBI_GOAL
  REFERENCING OLD AS old NEW AS new
  for each row
  declare nuovo_id number;
begin
IF :new.GOAL_ID IS NULL THEN
     select SBI_GOAL_SEQ.nextval into nuovo_id from dual;
     :new.GOAL_ID:=nuovo_id;
END IF;
end;
/
create trigger TRG_SBI_GOAL_HIERARCHY
  BEFORE INSERT
  on SBI_GOAL_HIERARCHY
  REFERENCING OLD AS old NEW AS new
  for each row
  declare nuovo_id number;
begin
IF :new.GOAL_HIERARCHY_ID IS NULL THEN
     select SBI_GOAL_HIERARCHY_SEQ.nextval into nuovo_id from dual;
     :new.GOAL_HIERARCHY_ID:=nuovo_id;
END IF;
end;
/
create trigger TRG_SBI_GOAL_KPI
  BEFORE INSERT
  on SBI_GOAL_KPI
  REFERENCING OLD AS old NEW AS new
  for each row
  declare nuovo_id number;
begin
IF :new.GOAL_KPI_ID IS NULL THEN
     select SBI_GOAL_KPI_SEQ.nextval into nuovo_id from dual;
     :new.GOAL_KPI_ID:=nuovo_id;
END IF;
end;
/          

-- CREATE PACKAGES SECTION


-- CREATE SYNONYMS SECTION


-- CREATE TABLE COMMENTS SECTION


-- CREATE ATTRIBUTE COMMENTS SECTION


