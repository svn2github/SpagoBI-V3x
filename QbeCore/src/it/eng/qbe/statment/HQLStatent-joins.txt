private List getJoinFields(Query query) {
		List joinFields = null;
		Iterator it;
		WhereField whereField;
		
		logger.debug("IN");
		try {
			joinFields = new ArrayList();
			it = query.getWhereFields().iterator();
			while( it.hasNext() ) {
				whereField = (WhereField)it.next();
				if( "LEFT JOIN ON".equalsIgnoreCase( whereField.getOperator() ) 
						|| "RIGHT JOIN ON".equalsIgnoreCase( whereField.getOperator() ) ) {
					joinFields.add(whereField);
					logger.debug("Join condition found on field [" + whereField.getUniqueName() + "]");
				}
				
			}
			logger.debug("Join condition found [" + joinFields.size() + "]");
		} finally {
			logger.debug("OUT");
		}
		
		Assert.assertNotNull(joinFields, "join fields list can be empty but not null");
		
		return joinFields;
	}
	
	/**
	 * @deperecated this has been a text: unfortunately hibernate does not support outer joins so the 
	 * possibilities to select JOIN as operator while defining a filter has been removed by the GUI
	 * As a consequence of that this method is expected to always return an empty string 
	 */
	private String buildJoinClause(Query query, Map entityAliases) {
		StringBuffer buffer;
		
		Iterator joins;
		WhereField joinField;
		WhereField whereField;
		DataMartField datamartField;
		DataMartEntity lentity;
		DataMartEntity rentity;
		String queryName;
		String lentityAlias;
		String rentityAlias;
		String leftHandValue;
		
		logger.debug("IN");
		buffer = new StringBuffer();
		try {
			joins = getJoinFields(query).iterator();
			int n = 0;
			while(joins.hasNext()) {
				joinField = (WhereField)joins.next();				
				logger.debug("join left-field unique name [" + joinField.getUniqueName() +"]");
				
				datamartField = getDataMartModel().getDataMartModelStructure().getField(joinField.getUniqueName());
				queryName = datamartField.getQueryName();
				logger.debug("join left-field query name [" + queryName +"]");
				
				
				lentity = datamartField.getParent().getRoot();				
				if(!entityAliases.containsKey(lentity.getUniqueName())) {
					lentityAlias = "jt_" + entityAliases.keySet().size() + (n++);
				} else {
					lentityAlias = (String)entityAliases.get( lentity.getUniqueName() );	
					entityAliases.remove( lentity.getUniqueName() );
				}			
				
				leftHandValue = lentityAlias + "." + queryName;
				logger.debug("join left-field query element [" + leftHandValue +"]");
				
				String rightHandValue = null;
				logger.debug("join right-field unique name [" + joinField.getOperand().toString() +"]");
				
				datamartField = getDataMartModel().getDataMartModelStructure().getField( joinField.getOperand().toString() );
				queryName = datamartField.getQueryName();
				logger.debug("join right-field query name [" + queryName +"]");
							
				rentity = datamartField.getParent().getRoot(); 
				if(!entityAliases.containsKey(rentity.getUniqueName())) {
					rentityAlias = "jt_" + entityAliases.keySet().size() + (n++);
				} else {
					rentityAlias = (String)entityAliases.get( rentity.getUniqueName() );	
					entityAliases.remove( rentity.getUniqueName() );
				}		
				
				rightHandValue = rentityAlias + "." + queryName;
				logger.debug("join right-field query element [" + rightHandValue +"]");
				
				buffer.append(lentity.getType() + " " + lentityAlias  
								+ " LEFT OUTER JOIN " 
								+ rentity.getType() + " " + rentityAlias  
								+ " ON "
								+ leftHandValue + " = " + rightHandValue);
				
				if(joins.hasNext() || entityAliases.keySet().iterator().hasNext()) {
					buffer.append(", ");
				}
				
			}
		} finally {
			logger.debug("OUT");
		}
		
		return buffer.toString().trim();
	}